[{"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name join city as t3 on t1.city_name = t3.city_name order by t3.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"rhode island\" ;", "prediction": "select count(*) from city as t1 join state as t2 on t1.state_name = t2.state_name where t1.area = (select t2.area from state as t3 join city as t4 on t3.state_name = t4.state_name where t4.country_name = \"Rhode Island\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'city.area'"}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 AND LAKEalias0.STATE_NAME = \"michigan\" ;", "prediction": "select major lake_name from lake where state_name = \"MI\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.river_name = t3.river_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.river_name = t3.river_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"delaware\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"delaware\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"ohio\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"Ohio\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"chattahoochee\" ;", "prediction": "select location from river where river_name = \"chattahoochee\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.river_name = t3.river_name where t3.name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.river_name = t3.river_name where t3.name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"potomac\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name like \"%potomac%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"red\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"red\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select state_name from border_info where border = (select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t1.county_name ='mississippi')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.county_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"ohio\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"Ohio\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"new york\" ) AND RIVERalias0.TRAVERSE = \"new york\" ;", "prediction": "select length from river where state_name = \"NY\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"washington\" ) AND RIVERalias0.TRAVERSE = \"washington\" ;", "prediction": "select max(t2.length) from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"florida\" ) AND RIVERalias0.TRAVERSE = \"florida\" ;", "prediction": "select length from river where state_name = 'FL'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"new york\" ) AND RIVERalias0.TRAVERSE = \"new york\" ;", "prediction": "select length from river where state_name = \"NY\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"mississippi\" ) AND RIVERalias0.TRAVERSE = \"mississippi\" ;", "prediction": "select length from river where state_name = \"Mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"colorado\" ) AND RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select length from river where state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"california\" ) AND RIVERalias0.TRAVERSE = \"california\" ;", "prediction": "select length from river where state_name = \"CA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"pennsylvania\" ) AND RIVERalias0.TRAVERSE = \"pennsylvania\" ;", "prediction": "select length from river where state_name = \"Pennsylvania\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select length from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"new york\" ;", "prediction": "select count(*) from river where state_name = \"NY\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"california\" ;", "prediction": "select count(*) from river where state_name = \"CA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"iowa\" ;", "prediction": "select count(*) from river where state_name = \"Iowa\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select count(*) from river where state_name = \"CO\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select count(*) from river where state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select count(*) from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select count(*) from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select count(*) from river where state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"washington\" ;", "prediction": "select count(*) from river where state_name = \"Washington\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"alaska\" ;", "prediction": "select count(*) from river where state_name = \"Alaska\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"missouri\" ;", "prediction": "select count(*) from river where state_name = \"Missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"idaho\" ;", "prediction": "select count(*) from river where state_name = \"Idaho\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"maine\" ;", "prediction": "select state_name from state where border = (select min(border) from state where country_name = \"USA\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"arizona\" ;", "prediction": "select state_name from state where border = (select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.state_name like '%arizona%')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"florida\" ;", "prediction": "select state_name from border_info where border intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = 'FL'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error condition: idx: 6, tok: intersect"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"montana\" ;", "prediction": "select state_name from border_info where border intersect select state_name from state where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error condition: idx: 6, tok: intersect"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"kentucky\" ;", "prediction": "select state_name from border_info where border = (select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t1.county_name = 'Kentucky')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.county_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ;", "prediction": "select state_name from border_info where border = (select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t1.county_name = 'Texas')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.county_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"hawaii\" ;", "prediction": "select state_name from border_info where border intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error condition: idx: 6, tok: intersect"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"michigan\" ;", "prediction": "select neighboring state from state where state_name = \"Michigan\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: neighboring"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"florida\" ;", "prediction": "select state_name from border_info where border = (select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t1.county_name = 'FL')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.county_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"alabama\" ;", "prediction": "select state_name from border_info where border = (select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t1.county_name = 'Alabama')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.county_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"kentucky\" ;", "prediction": "select state_name from border_info where border = (select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t1.county_name = 'Kentucky')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.county_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select river_name from river where state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"new york\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.population > 100 and t2.river_name like \"%new_york%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select * from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select distinct t1.river_name from river as t1 join state as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select distinct t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"new york\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"arizona\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"kansas\" ;", "prediction": "select river_name from river where state_name = \"Kansas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"new mexico\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"arkansas\" ;", "prediction": "select river_name from river where state_name = \"Arkansas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"louisiana\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"west virginia\" ;", "prediction": "select river_name from river where state_name = \"West Virginia\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"nevada\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"utah\" ;", "prediction": "select distinct river_name from river where state_name = \"Utah\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"indiana\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"missouri\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"alaska\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"alaska\" ;", "prediction": "select river_name from river where state_name = \"Alaska\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"ohio\" ;", "prediction": "select t1.river_name from river as t1 join border_info as t2 on t1.river_name = t2.river_name join state as t3 on t2.state_name = t3.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"maine\" ;", "prediction": "select river_name from river where state_name = \"maine\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"illinois\" ;", "prediction": "select river_name from river where state_name = \"IL\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 ;", "prediction": "select count(*) from border_info where state_name = (select state_name from border_info group by state_name order by count(*) desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"dallas\" ;", "prediction": "select state_name from state where city_name like \"%dallas%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city_name"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"san diego\" ;", "prediction": "select location from state where state_name = \"san diego\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"san antonio\" ;", "prediction": "select state_name from state where city_name like \"%san_antonio%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city_name"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"miami\" ;", "prediction": "select state_name from state where city_name like \"%miami%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city_name"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"dallas\" ;", "prediction": "select location from state where state_name = \"dallas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"portland\" ;", "prediction": "select location from state where state_name = \"Portland\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"kalamazoo\" ;", "prediction": "select state_name from state where area = (select t1.area from state as t1 join border_info as t2 on t1.state_name = t2.state_name join mountain as t3 on t2.mountain_name = t3.mountain_name)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.mountain_name'"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"austin\" ;", "prediction": "select location from state where state_name = \"Austin\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"springfield\" ;", "prediction": "select t1.state_name from state as t1 join city as t2 on t1.city_name = t2.city_name where t2.name = \"springfield\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.city_name'"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"san jose\" ;", "prediction": "select location from city where city_name = \"san jose\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"scotts valley\" ;", "prediction": "select location from state where country_name = \"Scotts Valley\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"new orleans\" ;", "prediction": "select location from state where state_name = \"new orleans\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"indianapolis\" ;", "prediction": "select location from city where state_name = \"Indianapolis\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"des moines\" ;", "prediction": "select state_name from state where population >= des moines", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: des"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"boston\" ;", "prediction": "select state_name from state where city_name like \"%boston%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city_name"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"fort wayne\" ;", "prediction": "select location from state where country_name = \"Fort Wayne\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"houston\" ;", "prediction": "select location from city where city_name = \"houston\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"springfield\" ;", "prediction": "select location from state where state_name = \"Springfield\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"baton rouge\" ;", "prediction": "select location from city where state_name = \"Baton Rouge\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"boulder\" ;", "prediction": "select people from city where state_name = \"Boulder\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: people"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"riverside\" ;", "prediction": "select count(*) from riverside", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'riverside'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.river_name = t2.river_name where t2.length = (select max(length) from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION > ( SELECT HIGHLOWalias1.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = \"colorado\" ) ;", "prediction": "select state_name from highlow where highest_point > (select max(highest_point) from highlow where colorado = 'CO')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: colorado"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(t1.highest_point) from mountain as t1 join highlow as t2 on t1.mountain_name = t2.mountain_name where t1.state_name = \"Montana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.mountain_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(highest_point) from mountain where state_name = \"Montana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highest_point"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select length from river where state_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"mississippi\" ) ;", "prediction": "select t2.highest_point from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t1.border = (select t1.border from border_info as t1 join highlow as t2 on t1.state_name = t2.state_name where t1.border ='mississippi')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error condition: idx: 34, tok: =__val_225_237__"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"mississippi\" ) ;", "prediction": "select t2.highest_point from border_info as t1 join highlow as t2 on t1.state_name = t2.state_name where t1.border = (select t1.border from border_info as t1 join highlow as t2 on t1.state_name = t2.state_name where t1.county_name = 'Mississippi')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.county_name'"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH IN ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias0 ) FROM ( SELECT MAX( RIVERalias1.LENGTH ) AS DERIVED_FIELDalias0 , RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias2.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias2 GROUP BY BORDER_INFOalias2.BORDER ) AS DERIVED_TABLEalias0 ) ) ) GROUP BY RIVERalias1.TRAVERSE ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select t1.length from river as t1 join border_info as t2 on t1.river_name = t2.river_name where t2.state_name = (select state_name from border_info group by state_name order by count(*) desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"wyoming\" ;", "prediction": "select high_point from highlow where state_name = \"Wyoming\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: high_point"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"rhode island\" ;", "prediction": "select max(t1.highest_point) from highlow as t1 join state as t2 on t1.state_name = t2.state_name where t2.rhode_island = (select t2.state_name from highlow as t1 join state as t2 on t1.state_name = t2.state_name)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.rhode_island'"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = \"mount mckinley\" ;", "prediction": "select height from mountain where mountain_name = \"mount mckinley\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: height"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select length from river where state_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select length from river where state_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"california\" ) AND RIVERalias0.TRAVERSE = \"california\" ;", "prediction": "select length from river where state_name = \"CA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select length from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( STATEalias0.CAPITAL ) FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"rhode island\" ;", "prediction": "select count(*) from state as t1 join island as t2 on t1.state_name = t2.state_name where t1.capital = (select capital from state where country_name = \"Rhode Island\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'island'"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select count(*) from river where state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select count(*) from river where state_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"atlanta\" AND CITYalias0.STATE_NAME = \"georgia\" ;", "prediction": "select population from city where state_name = \"Atlanta\" and county_name = \"Georgia\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: county_name"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"springfield\" AND CITYalias0.STATE_NAME = \"missouri\" ;", "prediction": "select population from city where state_name = \"Springfield\" and county_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: county_name"}, {"query": "SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( RIVERalias0.RIVER_NAME ) AS DERIVED_FIELDalias0 , RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ) AS DERIVED_TABLEalias0 ;", "prediction": "select count(*) from state group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT COUNT( STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 ;", "prediction": "select count(distinct state_name) from state where united_state = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: united_state"}, {"query": "SELECT COUNT( BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select count(distinct state_name) from border_info where population = (select max(population) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT COUNT( DISTINCT STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ) ;", "prediction": "select count(*) from state where state_name not in (select state_name from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( HIGHLOWalias0.STATE_NAME ) FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION > ( SELECT HIGHLOWalias1.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = ( SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ) ) ) ;", "prediction": "select count(*) from state where highest_point > (select max(highest_point) from state where capital = (select max(capital) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highest_point"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"florida\" ;", "prediction": "select major river_name from river where state_name = \"FL\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"ohio\" ;", "prediction": "select major river_name from river where state_name = \"Ohio\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select major_river_name from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_river_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"illinois\" ;", "prediction": "select major river_name from river where state_name = \"IL\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.length = (select max(length) from river where state_name = 'Texas')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.city_name from city as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t3.city_name from city as t3 join state as t4 on t3.state_name = t4.state_name where t4.mississippi intersect select t3.city_name from city as t3 join state as t4 on t3.state_name = t4.state_name where t4.mississippi intersect select t3.city_name from city as t3 join state as t4 on t3.state_name = t4.state_name where t4.mississippi intersect select t3.city_name from city as t3 join state as t4 on t3.state_name = t4.state_name where t4.mississippi intersect select t3.city_name from city as t3 join state as t4 on t3.state_name = t4.state", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.mississippi'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "prediction": "select t1.city_name from city as t1 join state as t2 on t1.state_name = t2.state_name order by t2.highest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.highest_point'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"new york\" ;", "prediction": "select major city_name from city where state_name = \"NY\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"california\" ;", "prediction": "select major city_name from city where state_name = \"CA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"vermont\" ;", "prediction": "select major city_name from city where state_name = \"VERMONT\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"pennsylvania\" ;", "prediction": "select major city_name from city where state_name = \"Pennsylvania\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"colorado\" ;", "prediction": "select major city_name from city where state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"new mexico\" ;", "prediction": "select major city_name from city where state_name = \"New Mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"north carolina\" ;", "prediction": "select major city_name from city where state_name = \"North Carolina\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"texas\" ;", "prediction": "select major city_name from city where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"california\" ;", "prediction": "select major city_name from city where state_name = \"CA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"delaware\" ;", "prediction": "select major city_name from city where state_name = \"Delaware\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"rhode island\" ;", "prediction": "select major city_name from city where state_name = \"Rhode Island\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.city_name from city as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t3.city_name from city as t3 join state as t4 on t3.state_name = t4.state_name where t4.mississippi intersect select t3.city_name from city as t3 join state as t4 on t3.state_name = t4.state_name where t4.mississippi intersect select t3.city_name from city as t3 join state as t4 on t3.state_name = t4.state_name where t4.mississippi intersect select t3.city_name from city as t3 join state as t4 on t3.state_name = t4.state_name where t4.mississippi intersect select t3.city_name from city as t3 join state as t4 on t3.state_name = t4.state", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.mississippi'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"texas\" ;", "prediction": "select major(population) from city where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"montana\" ;", "prediction": "select major population from city where state_name = \"MT\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"wisconsin\" ;", "prediction": "select major population from city where state_name = \"Wisconsin\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT DISTINCT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 , RIVER AS RIVERalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = CITYalias1.STATE_NAME ) AND RIVERalias0.TRAVERSE = CITYalias0.STATE_NAME ;", "prediction": "select t1.city_name from city as t1 join state as t2 on t1.state_name = t2.state_name join river as t3 on t2.river_name = t3.river_name order by t3.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select t1.capital from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = \"Texas\" order by t2.area desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.area'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = \"Texas\" order by t2.area desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.area'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = \"Texas\" order by t2.area desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.area'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"california\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"california\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = (select t2.border from border_info as t3 join state as t4 on t3.state_name = t4.state_name where t3.county_name = \"California\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.county_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"california\" ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = (select t2.border from border_info as t3 join state as t4 on t3.state_name = t4.state_name where t3.county_name = \"California\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.county_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"california\" AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"california\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = (select t2.border from border_info as t3 join state as t4 on t3.state_name = t4.state_name where t3.county_name = \"California\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.county_name'"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select length from river where state_name = (select state_name from state group by state_name order by count(*) desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select length from river group by length order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select length from river where traverse = (select max(vehicle_crosses) from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.length from river as t1 join state as t2 on t1.river_name = t2.river_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND RIVERalias0.TRAVERSE IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MAX( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "prediction": "select length from river where state_name = (select state_name from state group by state_name order by count(*) desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"nebraska\" ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"nebraska\" ) ;", "prediction": "select t2.length from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = (select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.population > 6000)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.length'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = \"nebraska\" AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select t2.length from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = (select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.population > 6000)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.length'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"indiana\" ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"indiana\" ) ;", "prediction": "select length from river where state_name = \"Indiana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = \"indiana\" AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select length from river where state_name = \"Indiana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"tennessee\" ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"tennessee\" ) ;", "prediction": "select length from river where state_name like \"%tennessee%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = \"tennessee\" AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select length from river where state_name like \"%tennessee%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = ( SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( CITYalias0.CITY_NAME ) DESC LIMIT 1 ) ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select t1.length from river as t1 join state as t2 on t1.state_name = t2.state_name group by t2.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ) ORDER BY HIGHLOWalias0.LOWEST_ELEVATION LIMIT 1 ;", "prediction": "select t1.lowest_point from highlow as t1 join state as t2 on t1.state_name = t2.state_name join river as t3 on t3.river_name = t2.river_name where t3.river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ORDER BY HIGHLOWalias0.LOWEST_ELEVATION LIMIT 1 ;", "prediction": "select min(lowest_point) from highlow where intersect select t1.lowest_point from highlow as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.lowest_point from highlow as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.lowest_point from highlow as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.lowest_point from highlow as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.lowest_point from highlow as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.lowest_point from high", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: intersect"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\" group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\" group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select state_name from state where intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.river_name = t3.river_name order by t3.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: intersect"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "prediction": "select state_name from state where intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.river_name = t3.river_name order by t3.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: intersect"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t1.population from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT SUM( DERIVED_TABLEalias0.LENGTH ) FROM ( SELECT DISTINCT RIVERalias0.RIVER_NAME , RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 ) AS DERIVED_TABLEalias0 ;", "prediction": "select sum(length) from river where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'as'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.river_name = t2.river_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.river_name = t2.river_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.river_name = t2.river_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.river_name = t2.river_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.river_name = t2.river_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.river_name = t2.river_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.river_name = t2.river_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t2.river_name from city as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = (select t1.border from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = 'Texas')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"new mexico\" ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = \"new mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"alabama\" ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = (select t1.border from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = 'Alabama')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t2.transite from border_info as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t2.transite from border_info as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"nevada\" ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "prediction": "select state_name from border_info where border = \"nevada\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"nevada\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"nevada\" ) ;", "prediction": "select state_name from border_info where border = \"nevada\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT DISTINCT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"nevada\" AND STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"nevada\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from border_info where border = \"nevada\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ) ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.country_name where t2.transfere = (select max(t2.highest_point) from river as t3 join state as t4 on t3.state_name = t4.state_name where t3.river_name = \"colorado\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.transfere'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( DISTINCT RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join city as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join city as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"mississippi\" ) ;", "prediction": "select state_name from border_info where border intersect select state_name from state where border ='mississippi'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error condition: idx: 6, tok: intersect"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"colorado\" ) ;", "prediction": "select state_name from border_info where border intersect select state_name from state where border = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error condition: idx: 6, tok: intersect"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"ohio\" ) ;", "prediction": "select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.ohio intersect select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.ohio intersect select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.ohio intersect select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.ohio intersect select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.ohio intersect select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.ohio'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.state_name from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.state_name from border_info as t1 join state as t2", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.mississippi'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select distinct state_name from border_info where intersect select distinct state_name from river where traverse = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: intersect"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.mississippi intersect select t1.state_name from state as t1 join border_info as t2", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.mississippi'"}, {"query": "SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER = \"texas\" AND BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.river_name = t3.river_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select distinct state_name from border_info where population = (select max(population) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select distinct state_name from border_info where population = (select max(population) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select state_name from border_info where population = (select max(population) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from border_info where population = (select max(population) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias2.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias2 GROUP BY BORDER_INFOalias2.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join city as t3 on t2.city_name = t3.city_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join city as t3 on t2.city_name = t3.city_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 WHERE CITYalias1.POPULATION > 150000 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join city as t3 on t2.city_name = t3.city_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select state_name from border_info where area = (select min(area) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: area"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name having count(*) >= 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select t1.density from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME NOT IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) ;", "prediction": "select distinct river_name from river except select t1.river_name from river as t1 join state as t2 on t1.river_name = t2.river_name where t2.state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"austin\" ) ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.border = t2.border where t1.state_name = \"Austin\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.border'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"atlanta\" ) ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.border = t2.border where t1.state_name = \"Atlanta\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.border'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MIN( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"idaho\" ) ) AND HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"idaho\" ) ;", "prediction": "select state_name from highlow where border = \"idaho\" order by lowest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = \"mckinley\" ;", "prediction": "select t1.state_name from state as t1 join mountain as t2 on t1.mountain_name = t2.mountain_name where t2.mountain_name = \"McKinley\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.mountain_name'"}, {"query": "SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = \"whitney\" ;", "prediction": "select location from mountain where mountain_name = \"mountain_name\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = \"whitney\" ;", "prediction": "select location from mountain where mountain_name = \"mountain_name\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ;", "prediction": "select distinct state_name from river", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ;", "prediction": "select distinct t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ) AND CITYalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ;", "prediction": "select t1.city_name from city as t1 join state as t2 on t1.state_name = t2.state_name where t2.border = (select t2.border from border_info as t3 join state as t4 on t3.state_name = t4.state_name)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.border'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER = \"texas\" ) ) AND CITYalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER = \"texas\" ) ;", "prediction": "select t1.city_name from city as t1 join state as t2 on t1.state_name = t2.state_name where t2.border = (select t2.border from border_info as t3 join state as t4 on t3.state_name = t4.state_name)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.border'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"iowa\" ) AND RIVERalias0.TRAVERSE = \"iowa\" ;", "prediction": "select min(length) from river where state_name = \"Iowa\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"iowa\" ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "prediction": "select min(length) from river where state_name = \"Iowa\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"nebraska\" ) AND RIVERalias0.TRAVERSE = \"nebraska\" ;", "prediction": "select min(length) from river where state_name = \"NEBRASKA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"nebraska\" ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "prediction": "select min(length) from river where state_name = \"NEBRASKA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select min(length) from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "prediction": "select min(length) from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = ( SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM RIVER AS RIVERalias0 , STATE AS STATEalias1 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" AND STATEalias1.STATE_NAME = RIVERalias0.TRAVERSE ) ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = (select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ) ;", "prediction": "select t1.capital from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = (select t2.border from border_info as t3 join state as t4 on t3.state_name = t4.state_name where t4.border = 'Texas')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.border'"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = ( SELECT STATEalias1.STATE_NAME FROM STATE AS STATEalias1 WHERE STATEalias1.POPULATION = ( SELECT MAX( STATEalias2.POPULATION ) FROM STATE AS STATEalias2 ) ) AND STATEalias0.STATE_NAME = RIVERalias0.TRAVERSE ;", "prediction": "select count(*) from state as t1 join river as t2 on t1.state_name = t2.state_name order by t1.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE ( HIGHLOWalias0.STATE_NAME = BORDER_INFOalias0.BORDER ) AND ( STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ) AND HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join highlow as t3 on t2.highlow = t3.state_name order by t3.lowest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: "}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"sacramento\" ;", "prediction": "select capital from state where capital = sacramento", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: sacramento"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t1.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.POPULATION = ( SELECT MAX( STATEalias3.POPULATION ) FROM STATE AS STATEalias3 ) ) ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER IN ( SELECT STATEalias4.STATE_NAME FROM STATE AS STATEalias4 WHERE STATEalias4.POPULATION = ( SELECT MAX( STATEalias5.POPULATION ) FROM STATE AS STATEalias5 ) ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join city as t3 on t2.city_name = t3.city_name order by t3.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.city_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MIN( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select state_name from border_info where population = (select min(population) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select count(distinct state_name) from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_info where state_name in (select state_name from border_", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_'"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select count(distinct state_name) from river where river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select count(distinct state_name) from river where river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select count(distinct state_name) from river where river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select count(distinct state_name) from river where river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND RIVERalias0.TRAVERSE IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MIN( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "prediction": "select length from river where state_name = (select state_name from state group by state_name order by count(*) limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME IN ( SELECT BORDER_INFOalias2.BORDER FROM BORDER_INFO AS BORDER_INFOalias2 WHERE BORDER_INFOalias2.STATE_NAME = \"florida\" ) ) ;", "prediction": "select state_name from border_info where border intersect select state_name from state where border = 'FL'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error condition: idx: 6, tok: intersect"}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 ;", "prediction": "select major(lake_name) from lake where state_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 ;", "prediction": "select major lake_name from lake where state_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"ohio\" ;", "prediction": "select count(distinct river_name) from river where border = 'Ohio'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( DISTINCT RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select count(*) from state where state_name near major river", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error condition: idx: 9, tok: near"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias0 ON STATEalias0.STATE_NAME = BORDER_INFOalias0.STATE_NAME WHERE STATEalias0.STATE_NAME <> \"alaska\" AND STATEalias0.STATE_NAME <> \"hawaii\" GROUP BY STATEalias0.STATE_NAME HAVING COUNT( BORDER_INFOalias0.BORDER ) = ( SELECT MIN( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias0 , STATEalias1.STATE_NAME FROM STATE AS STATEalias1 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias1 ON STATEalias1.STATE_NAME = BORDER_INFOalias1.STATE_NAME WHERE STATEalias1.STATE_NAME <> \"alaska\" AND STATEalias1.STATE_NAME <> \"hawaii\" GROUP BY STATEalias1.STATE_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info where border!= (select min(border) from border_info where state_name like \"%alaska%\" and state_name like \"%hawaii%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'left'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "prediction": "select t2.river_name from highlow as t1 join river as t2 on t1.state_name = t2.state_name order by t1.lowest_elevation limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "prediction": "select t2.river_name from highlow as t1 join river as t2 on t1.state_name = t2.state_name order by t1.lowest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( DISTINCT RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select count(distinct state_name) from river", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias2.TRAVERSE FROM RIVER AS RIVERalias2 WHERE RIVERalias2.LENGTH = ( SELECT MAX( RIVERalias3.LENGTH ) FROM RIVER AS RIVERalias3 ) ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.transfere = (select max(transfere) from river as t3 join state as t4 on t3.state_name = t4.state_name where t3.river_name = \"mississippi\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"rio grande\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"rio grande\" ) ;", "prediction": "select max(t1.area) from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"Rio Grande\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"colorado\" ) ;", "prediction": "select count(*) from river as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.colorado = \"NE\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION IN ( SELECT DERIVED_TABLEalias1.DERIVED_FIELDalias0 FROM ( SELECT MAX( CITYalias1.POPULATION ) AS DERIVED_FIELDalias0 , STATEalias0.STATE_NAME FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = CITYalias1.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) GROUP BY STATEalias0.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select t1.city_name from city as t1 join state as t2 on t1.state_name = t2.state_name group by t2.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ) ;", "prediction": "select state_name from state except select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM HIGHLOW AS HIGHLOWalias0 , RIVER AS RIVERalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND RIVERalias0.TRAVERSE = HIGHLOWalias0.STATE_NAME ;", "prediction": "select count(*) from river where state_name = (select state_name from highlow order by highest_point desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join city as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select count(*) from state as t1 join river as t2 on t1.river_name = t2.river_name where t2.length = (select min(length) from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT SUM( STATEalias0.POPULATION ) / SUM( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "prediction": "select avg(population) from state", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: /"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.border = t2.border where t1.population = (select max(population) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.border'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t3.river_name = t2.river_name where t3.length = (select max(length) from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT COUNT( DISTINCT BORDER_INFOalias0.BORDER ) FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select count(distinct state_name) from border_info where river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river_name"}, {"query": "SELECT STATEalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = HIGHLOWalias0.HIGHEST_POINT ;", "prediction": "select capital from state order by highest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highest_point"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( DERIVED_TABLEalias0.POPULATION ) FROM ( SELECT CITYalias1.POPULATION FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from state order by capital asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'as'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 , BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER = BORDER_INFOalias0.STATE_NAME AND BORDER_INFOalias1.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select state_name from border_info where population = (select max(population) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t1.capital from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.capital order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 , RIVER AS RIVERalias0 WHERE ( RIVERalias0.RIVER_NAME = \"mississippi\" ) AND ( RIVERalias0.TRAVERSE = HIGHLOWalias1.STATE_NAME ) ) ;", "prediction": "select t1.state_name from state as t1 join highlow as t2 on t1.state_name = t2.state_name order by t2.lowest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: "}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > ALL ( SELECT RIVERalias1.LENGTH FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"red\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select count(*) from river where length > (select max(length) from river where state_name = 'Texas')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: all"}, {"query": "SELECT STATEalias0.CAPITAL FROM CITY AS CITYalias0 , STATE AS STATEalias0 WHERE CITYalias0.POPULATION <= 150000 AND STATEalias0.CAPITAL = CITYalias0.CITY_NAME ;", "prediction": "select capital from state except select capital from city where population > 100", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: capital"}, {"query": "SELECT STATEalias0.COUNTRY_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"new hampshire\" ;", "prediction": "select location from state where state_name = \"new hampshire\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT STATEalias0.COUNTRY_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"massachusetts\" ;", "prediction": "select location from state where state_name = \"Massachusetts\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias0 ON STATEalias0.STATE_NAME = BORDER_INFOalias0.STATE_NAME GROUP BY STATEalias0.STATE_NAME HAVING COUNT( BORDER_INFOalias0.BORDER ) = ( SELECT MIN( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias0 , STATEalias1.STATE_NAME FROM STATE AS STATEalias1 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias1 ON STATEalias1.STATE_NAME = BORDER_INFOalias1.STATE_NAME GROUP BY STATEalias1.STATE_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'left'"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select major river_name from river where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select length from river where river_name = \"colorado\" and state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT HIGHLOWalias0.LOWEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_POINT = \"death valley\" ;", "prediction": "select max(mountain_altitude) from mountain where death_valley = (select max(mountain_altitude) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: death_valley"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t1.area desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.LENGTH > 750 AND RIVERalias1.TRAVERSE = \"virginia\" ) ) ;", "prediction": "select t1.city_name from city as t1 join state as t2 on t1.state_name = t2.state_name join river as t3 on t3.river_name = t2.river_name where t3.name = 'virginia'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM HIGHLOW AS HIGHLOWalias0 , RIVER AS RIVERalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND RIVERalias0.TRAVERSE = HIGHLOWalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select length from river where state_name = (select state_name from highlow order by highest_point desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}]