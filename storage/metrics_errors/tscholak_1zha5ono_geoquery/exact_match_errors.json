[{"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = \"new mexico\" ) AND CITYalias0.STATE_NAME = \"new mexico\" ;", "prediction": "select area from city where country_name = \"new mexico\" group by area order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: area"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME = \"texas\" ) AND CITYalias0.STATE_NAME = \"texas\" ;", "prediction": "select city from city where state_name = \"Texas\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ) ;", "prediction": "select t2.river_name from city as t1 join river as t2 on t1.city_name = t2.state_name order by t1.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"washington\" ;", "prediction": "select area from city where state_name = \"washington\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: area"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = \"virginia\" ;", "prediction": "select city from city where state_name = \"Vincent\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = \"california\" ;", "prediction": "select city from city where state_name = \"california\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = \"texas\" ;", "prediction": "select city from city where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME = \"texas\" ;", "prediction": "select city from city where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city"}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 AND LAKEalias0.STATE_NAME = \"michigan\" ;", "prediction": "select major_name from lake where state_name = \"Michigan\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select distinct t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.mississippi = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.mississippi'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.missouri_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.missouri_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"delaware\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"delaware\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"ohio\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = 'ohio'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"chattahoochee\" ;", "prediction": "select chattahoochee from river", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: chattahoochee"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"chattahoochee\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"chattahoochee\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"red\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.red_river = \"red\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select distinct t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"ohio\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = 'ohio'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT , HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = 0 ;", "prediction": "select max(t1.highlow), t1.state_name from state as t1 join highlow as t2 on t1.state_name = t2.state_name where t2.lowest_point = (select max(lowest_point) from highlow)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.highlow'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"washington\" ) AND RIVERalias0.TRAVERSE = \"washington\" ;", "prediction": "select max(t2.length) from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.state_name = \"washington\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"florida\" ) AND RIVERalias0.TRAVERSE = \"florida\" ;", "prediction": "select max(length) from river where state_name = \"FL\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"illinois\" ) AND RIVERalias0.TRAVERSE = \"illinois\" ;", "prediction": "select max(t2.length) from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.county_name = \"illinois\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"colorado\" ) AND RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select max(length) from river where colorado = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: colorado"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select max(t2.length) from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"california\" ) AND RIVERalias0.TRAVERSE = \"california\" ;", "prediction": "select max(length) from river where state_name = \"California\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select max(length) from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"california\" ;", "prediction": "select count(*) from river where state_name = \"California\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select count(*) from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select count(*) from river where state_name like \"%tn%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"washington\" ;", "prediction": "select count(*) from river where state_name = \"Washington\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"michigan\" ;", "prediction": "select neighbor from state where state_name = \"Michigan\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: neighbor"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select river_name from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select distinct river_name from river where colorado = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: colorado"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"arizona\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.area = \"arizona\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"kansas\" ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.state_name = t2.state_name where t2.country_name = \"kansas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"louisiana\" ;", "prediction": "select distinct t1.river_name from river as t1 join state as t2 on t1.state_name = t2.state_name where t2.state_name = \"Louisiana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"west virginia\" ;", "prediction": "select river_name from river where area = \"west virginia\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: area"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"nevada\" ;", "prediction": "select distinct river_name from river where state_name = \"nevada\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"indiana\" ;", "prediction": "select river_name from river where state_name = \"indiana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"missouri\" ;", "prediction": "select distinct river_name from river where location like \"%missouri%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select distinct river_name from river where colorado = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: colorado"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"illinois\" ;", "prediction": "select t1.river_name from river as t1 join park as t2 on t1.river_name = t2.river_name where t2.state_name = \"illinois\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'park'"}, {"query": "SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 ;", "prediction": "select count(*) from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"dallas\" ;", "prediction": "select location from city where state_name = \"Dallas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"portland\" ;", "prediction": "select location from city where state_name = \"portland\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"austin\" ;", "prediction": "select location from city where state_name = \"Austin\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"san jose\" ;", "prediction": "select location from city where state_name = \"San jose\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"new orleans\" ;", "prediction": "select location from city where country_name = \"new orleans\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"indianapolis\" ;", "prediction": "select indianapolis from city", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: indianapolis"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"boston\" ;", "prediction": "select state_name from state where county_name like \"%bston%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: county_name"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"fort wayne\" ;", "prediction": "select fort_wayne from city", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: fort_wayne"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"houston\" ;", "prediction": "select t1.area from city as t1 join state as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'city.area'"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"springfield\" ;", "prediction": "select springfield from city", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: springfield"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"baton rouge\" ;", "prediction": "select location from city where state_name = \"baton rouge\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"boulder\" ;", "prediction": "select population from city where mountain_name like \"%boil%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: mountain_name"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"boulder\" ;", "prediction": "select population from city where mountain_name like \"%bangladesh%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: mountain_name"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"boulder\" ;", "prediction": "select t1.population from city as t1 join mountain as t2 on t1.mountain_name = t2.mountain_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'city.mountain_name'"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"riverside\" ;", "prediction": "select count(*) from city where river_name like \"%riverside%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river_name"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = (select max(river_name) from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"new mexico\" ;", "prediction": "select max(elevation) from highlow where state_name = \"new mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: elevation"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"florida\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max)))) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"alabama\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"texas\" ;", "prediction": "select max(elevation) from highlow where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: elevation"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"nevada\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max)))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"south carolina\" ;", "prediction": "select max(elevation) from highlow where state_name = \"South Carolina\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: elevation"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"louisiana\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"delaware\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select river_name from river where state_name = \"United States\" order by length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select max(length) from river where state_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"mississippi\" ) ;", "prediction": "select max(t2.highlow) from state as t1 join highlow as t2 on t1.state_name = t2.state_name where t1.county_name like \"%mississippi%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.highlow'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"mississippi\" ) ;", "prediction": "select max(highlow) from highlow where state_name like \"%mississippi%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highlow"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"georgia\" ) ORDER BY HIGHLOWalias0.HIGHEST_ELEVATION DESC LIMIT 1 ;", "prediction": "select max(t2.highlow) from border_info as t1 join highlow as t2 on t1.state_name = t2.state_name where t1.border = \"georgia\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.highlow'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"colorado\" ) ORDER BY HIGHLOWalias0.HIGHEST_ELEVATION DESC LIMIT 1 ;", "prediction": "select max(t2.highlow) from border_info as t1 join highlow as t2 on t1.state_name = t2.state_name where t1.border = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.highlow'"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH IN ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias0 ) FROM ( SELECT MAX( RIVERalias1.LENGTH ) AS DERIVED_FIELDalias0 , RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias2.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias2 GROUP BY BORDER_INFOalias2.BORDER ) AS DERIVED_TABLEalias0 ) ) ) GROUP BY RIVERalias1.TRAVERSE ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select max(length) from river where border = (select state_name from border_info group by state_name order by count(*) desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"iowa\" ;", "prediction": "select max(highlow) from highlow where state_name = \"iowa\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highlow"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"maine\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))))", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"virginia\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"wyoming\" ;", "prediction": "select highpoint from highlow where high_elevation >= (select max(highest_point) from highlow)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highpoint"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"hawaii\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))))", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"wyoming\" ;", "prediction": "select max(highlow) from highlow", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highlow"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"colorado\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))))", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"oregon\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max())) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"ohio\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))))", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"florida\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"rhode island\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"new mexico\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"kansas\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"delaware\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))))", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"texas\" ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))))", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT COUNT( HIGHLOWalias0.STATE_NAME ) FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION < ( SELECT HIGHLOWalias1.LOWEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = \"alabama\" ) ;", "prediction": "select count(*) from state where elevation < (select max(elevation) from highlow)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: elevation"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = \"mount mckinley\" ;", "prediction": "select max(t2.height) from mountain as t1 join highlow as t2 on t1.mountain_name = t2.mountain_name where t1.country_name = \"Mckinley\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.mountain_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = \"san francisco\" ;", "prediction": "select max(elevation) from highlow where state_name like \"%san francisco%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: elevation"}, {"query": "SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "prediction": "select max(elevation) from highlow where state_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: elevation"}, {"query": "SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "prediction": "select max(elevation) from highlow where state_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: elevation"}, {"query": "SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "prediction": "select max(height) from highlow where state_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: height"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"north platte\" ;", "prediction": "select length from river where region = \"North platte\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: region"}, {"query": "SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"california\" ) AND RIVERalias0.TRAVERSE = \"california\" ;", "prediction": "select length from river where state_name = \"California\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select length from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"spokane\" AND CITYalias0.STATE_NAME = \"washington\" ;", "prediction": "select count(*) from city as t1 join state as t2 on t1.state_name = t2.state_name where t1.county_name = \"spokane\" and t2.state_name = \"washington\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'city.county_name'"}, {"query": "SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( RIVERalias0.RIVER_NAME ) AS DERIVED_FIELDalias0 , RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ) AS DERIVED_TABLEalias0 ;", "prediction": "select count(*) from state order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT COUNT( DISTINCT STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ) ;", "prediction": "select count(*) from state where state_name not in (select state_name from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"florida\" ;", "prediction": "select major_name from river where state_name = \"FL\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"ohio\" ;", "prediction": "select major_name from river where state_name = \"ohio\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select major_name from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"illinois\" ;", "prediction": "select major_name from river where area = illinois", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.length = (select max(length) from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"texas\" ;", "prediction": "select capital from city where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: capital"}, {"query": "SELECT STATEalias0.CAPITAL FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"missouri\" AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select capital from state where border_name like \"%missouri%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border_name"}, {"query": "SELECT STATEalias0.CAPITAL FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select t1.capital from city as t1 join border_info as t2 on t1.city_name = t2.state_name where t2.border = 'Texas'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'city.capital'"}, {"query": "SELECT STATEalias0.CAPITAL FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select capital from state where border = 'Texas'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT STATEalias0.CAPITAL FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select capital from state where border = 'Texas'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 ;", "prediction": "select max(highlow) from highlow", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highlow"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"alabama\" ;", "prediction": "select major_city from city where country_name = \"alabama\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"alaska\" ;", "prediction": "select major_city from city where state_name = \"alaska\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"new york\" ;", "prediction": "select major_city from city where country_name = \"new york city\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"california\" ;", "prediction": "select major_city from city where state_name = \"california\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"vermont\" ;", "prediction": "select major_city from city where state_name = \"Vermont\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"pennsylvania\" ;", "prediction": "select major_city from city where country_name = \"Pennsylvania\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"texas\" ;", "prediction": "select major_city from city where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"oklahoma\" ;", "prediction": "select major_city from city where state_name = \"oklahoma\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"colorado\" ;", "prediction": "select major_name from city where state_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"new mexico\" ;", "prediction": "select major_city from city where country_name = \"new mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"north carolina\" ;", "prediction": "select major_city from city where state_name = \"North Carolina\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"ohio\" ;", "prediction": "select major_city from city where state_name = \"ohio\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"texas\" ;", "prediction": "select major_city from city where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"wyoming\" ;", "prediction": "select major_city from city where state_name = \"wyoming\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"california\" ;", "prediction": "select major_city from city where state_name = \"California\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"delaware\" ;", "prediction": "select major_city from city where state_name = \"delaware\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"montana\" ;", "prediction": "select major_city from city where country_name = \"Montana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"rhode island\" ;", "prediction": "select major_city from city where country_name = \"rhode island\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"missouri\" ;", "prediction": "select major_city from city where state_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"kansas\" ;", "prediction": "select major_city from city where country_name = \"kansas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select major_city from city where state_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 ;", "prediction": "select major_city from city where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 ;", "prediction": "select major_city from city where state_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 ;", "prediction": "select major_city from city where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_city"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select population from state where border = 'Texas'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "prediction": "select city from city where state_name = \"United States\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city"}, {"query": "SELECT STATEalias0.CAPITAL FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "prediction": "select capital from state order by minimum_point asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: minimum_point"}, {"query": "SELECT DISTINCT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 , RIVER AS RIVERalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = CITYalias1.STATE_NAME ) AND RIVERalias0.TRAVERSE = CITYalias0.STATE_NAME ;", "prediction": "select city_name from city where state_name = \"american\" and river_name = \"river\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river_name"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "prediction": "select capital from city where country_name = \"USA\" order by capital desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: capital"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) ;", "prediction": "select capital from city where country_name = \"USA\" order by capital desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: capital"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select capital from state order by length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: length"}, {"query": "SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"maine\" ;", "prediction": "select density from city where state_name like \"%maine%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: density"}, {"query": "SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"wyoming\" ;", "prediction": "select density from city where city_name like \"%wyoming%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: density"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"austin\" ) ;", "prediction": "select max(t2.highlow) from state as t1 join highlow as t2 on t1.state_name = t2.state_name where t1.capital = \"Austin\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.highlow'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"des moines\" ) ;", "prediction": "select max(t2.highlow) from state as t1 join highlow as t2 on t1.state_name = t2.state_name where t1.capital = \"des moines\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.highlow'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"des moines\" ) ;", "prediction": "select max(t2.highlow) from state as t1 join highlow as t2 on t1.state_name = t2.state_name where t1.capital = \"des moines\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.highlow'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from mountain)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))))", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max)))))", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select max(highlow) from highlow where state_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highlow"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max)))) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.DENSITY = ( SELECT MIN( STATEalias1.DENSITY ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select max(denomination) from state order by population asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: denomination"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ;", "prediction": "select state_name from border_info order by border_name desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border_name"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "prediction": "select state_name from border_info order by border_name desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border_name"}, {"query": "SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from border_info order by border_name desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border_name"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select length from river group by length order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select length from river group by length order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select length from river group by length order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.length from river as t1 join state as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND RIVERalias0.TRAVERSE IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MAX( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "prediction": "select length from river order by state_name desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"nebraska\" ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"nebraska\" ) ;", "prediction": "select max(length) from river where state_name like \"%nebraska%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = \"nebraska\" AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select max(length) from river where state_name like \"%nebraska%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"indiana\" ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"indiana\" ) ;", "prediction": "select max(length) from river where state_name like \"%diana%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = \"indiana\" AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select max(length) from river where state_name like \"%diana%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"tennessee\" ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"tennessee\" ) ;", "prediction": "select max(length) from river where border_info in (select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = 'tennessee')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border_info"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = \"tennessee\" AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select max(length) from river where border_info in (select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = 'tennessee')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border_info"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = ( SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( CITYalias0.CITY_NAME ) DESC LIMIT 1 ) ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select length from river where state_name = (select state_name from city group by state_name order by count(*) desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ) ORDER BY HIGHLOWalias0.LOWEST_ELEVATION LIMIT 1 ;", "prediction": "select min(t2.lowest_point) from river as t1 join highlow as t2 on t1.rid = t2.rid where t1.country_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.rid'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select population from state group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select min(t1.state_name) from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT SUM( DERIVED_TABLEalias0.LENGTH ) FROM ( SELECT DISTINCT RIVERalias0.RIVER_NAME , RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 ) AS DERIVED_TABLEalias0 ;", "prediction": "select sum(length) from river where country_name like \"%usa%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'as'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t2.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.state_name = t2.state_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.state_name = t2.state_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.state_name = t2.state_name group by t1.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t2.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 GROUP BY ( RIVERalias0.RIVER_NAME ) ORDER BY COUNT( DISTINCT RIVERalias0.TRAVERSE ) DESC LIMIT 1 ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t2.river_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t2.river_name from city as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"new mexico\" ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = \"new mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"alabama\" ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = 'alabama'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t2.transite from border_info as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t2.crosse from border_info as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"pennsylvania\" ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "prediction": "select state_name from state where border = \"Pennsylvania\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"pennsylvania\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"pennsylvania\" ) ;", "prediction": "select state_name from state where border = \"Pennsylvania\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT DISTINCT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"pennsylvania\" AND STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"pennsylvania\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from state where border = \"Pennsylvania\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "prediction": "select state_name from state where border = \"Texas\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ;", "prediction": "select state_name from state where border = \"Texas\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT DISTINCT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from state where border = \"Texas\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( DISTINCT RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select state_name from city group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select state_name from city group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"ohio\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.ohio = 'Ohio'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.ohio'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.mississippi = 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.mississippi'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.mississippi = 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.mississippi'"}, {"query": "SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER = \"texas\" AND BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = 'Texas' intersect select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = 'Grand Rapids'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select state_name from border_info order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from border_info order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias2.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias2 GROUP BY BORDER_INFOalias2.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join city as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 WHERE CITYalias1.POPULATION > 150000 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select state_name from border_info order by area asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: area"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select state_name from border_info order by area asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: area"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select distinct state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t2.state_name having count(*) >= 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select t1.density from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.distance desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"austin\" ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.capital = \"Austin\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"atlanta\" ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.capital = \"atlanta\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MIN( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t2.river_name from city as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select state_name from highlow order by max(est_elevation) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: est_elevation"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select state_name from highlow order by max(est_elevation) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: est_elevation"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select state_name from highlow order by max(est_elevation) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: est_elevation"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select state_name from highlow order by max(est_elevation) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: est_elevation"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = \"whitney\" ;", "prediction": "select location from mountain where mountain_name = \"Mountain Whitney\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = \"whitney\" ;", "prediction": "select location from mountain where country_name = \"mountain whitney\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ;", "prediction": "select distinct state_name from river", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ;", "prediction": "select distinct state_name from river", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"california\" ) ) AND CITYalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"california\" ) ;", "prediction": "select city from city where state_name = \"California\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 WHERE CITYalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER = \"california\" ) ) AND CITYalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER = \"california\" ) ;", "prediction": "select city from city where state_name = \"California\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"iowa\" ) AND RIVERalias0.TRAVERSE = \"iowa\" ;", "prediction": "select min(length) from river where state_name like \"%iowa%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"iowa\" ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "prediction": "select min(length) from river where state_name like \"%iowa%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"nebraska\" ) AND RIVERalias0.TRAVERSE = \"nebraska\" ;", "prediction": "select min(length) from river where state_name like \"%nebraska%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"nebraska\" ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "prediction": "select min(length) from river where state_name like \"%nebraska%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select min(length) from river where state_name like \"%tn%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "prediction": "select min(length) from river where state_name like \"%tn%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select major_name from city where state_name = \"USA\" order by population asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ) ;", "prediction": "select capital from state where border = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE ( HIGHLOWalias0.STATE_NAME = BORDER_INFOalias0.BORDER ) AND ( STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ) AND HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name order by t2.lowest_point limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: "}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ;", "prediction": "select population from state where border_info = (select state_name from border_info order by count(*) desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border_info"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t1.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.POPULATION = ( SELECT MAX( STATEalias3.POPULATION ) FROM STATE AS STATEalias3 ) ) ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER IN ( SELECT STATEalias4.STATE_NAME FROM STATE AS STATEalias4 WHERE STATEalias4.POPULATION = ( SELECT MAX( STATEalias5.POPULATION ) FROM STATE AS STATEalias5 ) ) ) ;", "prediction": "select state_name from border_info order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT STATEalias0.CAPITAL FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "prediction": "select capital from state order by max(highlow) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highlow"}, {"query": "SELECT STATEalias0.CAPITAL FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "prediction": "select capital from state order by max(estuary_elevation) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: estuary_elevation"}, {"query": "SELECT DISTINCT STATEalias0.CAPITAL FROM STATE AS STATEalias0 ;", "prediction": "select 50 capital from state where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: 50"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select count(*) from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select count(*) from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select count(*) from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select count(*) from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT SUM( STATEalias0.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select sum(population) from state where border = 'Texas'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 ;", "prediction": "select major_name from lake where state_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 ;", "prediction": "select major_name from lake where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( DISTINCT RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select count(*) from state where state_name next to major river", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error condition: idx: 9, tok: next"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias0 ON STATEalias0.STATE_NAME = BORDER_INFOalias0.STATE_NAME WHERE STATEalias0.STATE_NAME <> \"alaska\" AND STATEalias0.STATE_NAME <> \"hawaii\" GROUP BY STATEalias0.STATE_NAME HAVING COUNT( BORDER_INFOalias0.BORDER ) = ( SELECT MIN( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias0 , STATEalias1.STATE_NAME FROM STATE AS STATEalias1 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias1 ON STATEalias1.STATE_NAME = BORDER_INFOalias1.STATE_NAME WHERE STATEalias1.STATE_NAME <> \"alaska\" AND STATEalias1.STATE_NAME <> \"hawaii\" GROUP BY STATEalias1.STATE_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info where border = \"alaska\" intersect select state_name from state where border = \"hawaii\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'left'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))))) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT STATEalias1.STATE_NAME FROM STATE AS STATEalias1 WHERE STATEalias1.POPULATION = ( SELECT MIN( STATEalias2.POPULATION ) FROM STATE AS STATEalias2 ) ) ;", "prediction": "select max(t2.highlow) from state as t1 join highlow as t2 on t1.state_name = t2.state_name order by t1.population limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.highlow'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "prediction": "select t2.river_name from highlow as t1 join river as t2 on t1.state_name = t2.state_name order by t1.low_elevation limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "prediction": "select t2.river_name from highlow as t1 join river as t2 on t1.state_name = t2.state_name order by t1.lowest_point limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( DISTINCT RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select count(distinct state_name) from river where river_name = \"major\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias2.TRAVERSE FROM RIVER AS RIVERalias2 WHERE RIVERalias2.LENGTH = ( SELECT MAX( RIVERalias3.LENGTH ) FROM RIVER AS RIVERalias3 ) ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"rio grande\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"rio grande\" ) ;", "prediction": "select max(t1.population) from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.rio_que = (select max(population) from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"colorado\" ) ;", "prediction": "select count(*) from river where border_name like \"%colorado%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border_name"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME NOT IN ( SELECT RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 WHERE RIVERalias2.TRAVERSE = \"texas\" ) ) AND RIVERalias0.RIVER_NAME NOT IN ( SELECT RIVERalias3.RIVER_NAME FROM RIVER AS RIVERalias3 WHERE RIVERalias3.TRAVERSE = \"texas\" ) ;", "prediction": "select length from river where length!= (select max(length) from river where state_name = 'Texas')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION IN ( SELECT DERIVED_TABLEalias1.DERIVED_FIELDalias0 FROM ( SELECT MAX( CITYalias1.POPULATION ) AS DERIVED_FIELDalias0 , STATEalias0.STATE_NAME FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = CITYalias1.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) GROUP BY STATEalias0.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select city from city where state_name = (select state_name from border_info order by population desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ) ;", "prediction": "select state_name from state except select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select state_name from city group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE ( HIGHLOWalias0.STATE_NAME = ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = RIVERalias0.TRAVERSE GROUP BY STATEalias0.STATE_NAME ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ) ) ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max()) from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select count(*) from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT SUM( STATEalias0.POPULATION ) / SUM( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "prediction": "select avg(population) from city where state_name like \"%us%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: /"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.population = (select max(population) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT STATEalias1.STATE_NAME FROM STATE AS STATEalias1 WHERE STATEalias1.AREA = ( SELECT MAX( STATEalias2.AREA ) FROM STATE AS STATEalias2 ) ) ;", "prediction": "select min(lowest_point) from state order by area desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: lowest_point"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( DERIVED_TABLEalias0.POPULATION ) FROM ( SELECT CITYalias1.POPULATION FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from state order by capital asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'as'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 , BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER = BORDER_INFOalias0.STATE_NAME AND BORDER_INFOalias1.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select state_name from border_info order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select capital from state group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT MAX( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "prediction": "select size from state order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: size"}, {"query": "SELECT STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ;", "prediction": "select size from state order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: size"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 , RIVER AS RIVERalias0 WHERE ( RIVERalias0.RIVER_NAME = \"mississippi\" ) AND ( RIVERalias0.TRAVERSE = HIGHLOWalias1.STATE_NAME ) ) ;", "prediction": "select t1.state_name from state as t1 join highlow as t2 on t1.state_name = t2.state_name order by t2.lowest_point asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: "}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > ALL ( SELECT RIVERalias1.LENGTH FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"red\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select count(*) from river where length > (select red from river where length > )", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: all"}, {"query": "SELECT STATEalias0.CAPITAL FROM CITY AS CITYalias0 , STATE AS STATEalias0 WHERE CITYalias0.POPULATION <= 150000 AND STATEalias0.CAPITAL = CITYalias0.CITY_NAME ;", "prediction": "select capital from state except select capital from state where capital ='major'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error condition: idx: 11, tok: =__val_74_80__"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "prediction": "select max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max))) from state)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: max"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 ;", "prediction": "select city from city where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT STATEalias1.STATE_NAME FROM STATE AS STATEalias1 WHERE STATEalias1.AREA = ( SELECT MAX( STATEalias2.AREA ) FROM STATE AS STATEalias2 ) ) ;", "prediction": "select max(t2.highlow) from state as t1 join highlow as t2 on t1.state_name = t2.state_name order by t1.area desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.highlow'"}, {"query": "SELECT STATEalias0.COUNTRY_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"new hampshire\" ;", "prediction": "select location from city where country_name = \"hampshire\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT STATEalias0.COUNTRY_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"massachusetts\" ;", "prediction": "select location from city where state_name = \"Massachusetts\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: location"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias0 ON STATEalias0.STATE_NAME = BORDER_INFOalias0.STATE_NAME GROUP BY STATEalias0.STATE_NAME HAVING COUNT( BORDER_INFOalias0.BORDER ) = ( SELECT MIN( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias0 , STATEalias1.STATE_NAME FROM STATE AS STATEalias1 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias1 ON STATEalias1.STATE_NAME = BORDER_INFOalias1.STATE_NAME GROUP BY STATEalias1.STATE_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'left'"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select major_name from river where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"wyoming\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"wyoming\" ) ;", "prediction": "select count(*) from state where border = 'Wyoming' order by population asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT HIGHLOWalias0.LOWEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_POINT = \"death valley\" ;", "prediction": "select death_elevation from highlow where mountain_name = \"death valley\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: death_elevation"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t1.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.LENGTH > 750 AND RIVERalias1.TRAVERSE = \"virginia\" ) ) ;", "prediction": "select t1.city_name from city as t1 join river as t2 on t1.city_name = t2.major_city where t2.country_name = \"Vincent\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.major_city'"}]