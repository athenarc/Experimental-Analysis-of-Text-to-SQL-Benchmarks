[{"query": "SELECT AwayTeam FROM football_data WHERE HomeTeam = \"Omiya Ardija\" AND Season LIKE \"%2018%\"", "prediction": "select t2.awayteam from betfront as t1 join soccer_data as t2 on t1.ftr = t2.hometeam where t1.hometeam = 'Omiya Ardija' and t1.year = 2018", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'soccer_data'"}, {"query": "SELECT count(*) FROM football_data WHERE FTHG + FTAG > 5", "prediction": "select count(*) from betfront group by betfront having count(*) > 5", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: betfront"}, {"query": "SELECT max(B365A) FROM football_data", "prediction": "select max(home_closing) from betfront where home_opening = (select max(home_closing) from betfront where hometeam = 'Odd')", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: hometeam"}, {"query": "SELECT count(Div) FROM football_data", "prediction": "select count(distinct division) from football_data", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: division"}, {"query": "SELECT B365D FROM football_data WHERE HomeTeam = \"Swindon\" and AwayTeam = \"Millwall\" and Season = \"2016/2017\"", "prediction": "select t1.b365d from betfront as t1 join football_data as t2 on t1.b365d = t2.b365d where t2.season = 2016/2017 and t2.hometeam = 'Swindon' intersect select t1.b365d from betfront as t1 join football_data as t2 on t1.b365d = t2.b365d where t2.hometeam = 'Millwall' and t2.hometeam = 'Swindon'", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'betfront.b365d'"}, {"query": "SELECT T1.school_district FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Wisconsin\" ORDER BY T1.t_fed_rev DESC LIMIT 1", "prediction": "select school_district from finrev_fed_17 where state = 'Wisconsin' group by school_district order by sum(t1.finrev_fed_rev) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state"}, {"query": "SELECT avg(T1.c14) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Virginia\"", "prediction": "select avg(t1.average_scale_score) from ndecore_fed_key_17 as t1 join finrev_fed_key_17 as t2 on t1.state_code = t2.state_code where t2.state = 'Venezuel'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecore_fed_key_17'"}, {"query": "SELECT T2.state, sum(c14),sum(c25) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY T3.average_scale_score DESC LIMIT 10", "prediction": "select state, avg(mean_scale_score), t1.c25 from ndecoreexcel_math_grade8 as t1 join finrev_fed_key_17 as t2 on t1.state_code = t2.state_code group by t1.c25 order by avg(mean_scale_score) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, max(T1.c14), T3.average_scale_score FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state UNION SELECT T1.school_district, max(T1.c25), T3.average_scale_score FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.state, avg(t2.avg(t1.average_scale_score) from ndecoreexcel_math_grade8 as t1 join school as t2 on t1.school_district = t2.school_district group by t1.state", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'school'"}, {"query": "SELECT T1.school_district, max(T1.t_fed_rev / T3.average_scale_score) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 on T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district from finrev_fed_17 as t1 join ndecoreexcel_math_grade8 as t2 on t1.state_code = t2.state_code group by t1.school_district order by sum(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(t2.avg(", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T2.state, T3.average_scale_score FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY sum(T1.t_fed_rev) DESC LIMIT 1", "prediction": "select t1.state, avg(t1.average_scale_score) from ndecoreexcel_math_grade8 as t1 join state as t2 on t1.state_code = t2.state_code group by t1.state_code order by sum(t1.amount) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'state'"}, {"query": "SELECT T1.school_district, min(T1.t_fed_rev / T3.average_scale_score) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 on T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district from finrev_fed_17 as t1 join ndecoreexcel_math_grade8 as t2 on t1.state_code = t2.state_code group by t1.school_district order by sum(t2.amount) limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T2.state, T3.average_scale_score FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY sum(T1.t_fed_rev) LIMIT 1", "prediction": "select state, avg(t1.avg(t1.average_scale_score) from ndecoreexcel_math_grade8 as t1 join ref_fed_key_17 as t2 on t1.state_code = t2.state_code group by state_code order by sum(t1.avg(t1.average_scale_score) asc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ref_fed_key_17'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"California\"", "prediction": "select avg(avg(match_score) from ndecoreexcel_math_grade8 where state = 'CA'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: match_score"}, {"query": "SELECT count(DISTINCT school_district) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Indiana\"", "prediction": "select count(distinct school_district) from finrev_fed_17 where state = 'Indiana'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state"}, {"query": "SELECT state_code FROM FINREV_FED_KEY_17 WHERE state = \"Virginia\"", "prediction": "select state_code from finrev_fed_17 where state = 'VA'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state"}, {"query": "SELECT T2.state FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code GROUP BY T2.state ORDER BY sum(t_fed_rev) DESC LIMIT 1", "prediction": "select state from finrev_fed_17 order by t1.revenue desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state"}, {"query": "SELECT sum(T1.c14), sum(T1.c25) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Colorado\"", "prediction": "select t1.c18, t1.c25 from ndecore_fed_key_17 as t1 join state as t2 on t1.state_code = t2.state_code where t2.state = 'Colorado' and t1.census = 'Children'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecore_fed_key_17'"}, {"query": "SELECT t_fed_rev FROM FINREV_FED_17 WHERE school_district LIKE \"%Pecatonia Area%\"", "prediction": "select sum(t1.finrev_fed_rev) from finrev_fed_17 as t1 join school_district as t2 on t1.school_district = t2.school_district where t2.school_district = 'PECATONIA AREA SCHOOL DISTRICT'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'school_district'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"North Carolina\" UNION SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"South Carolina\"", "prediction": "select t1.avg(t1.score) from ndecore_excel_math_grade8 as t1 join students as t2 on t1.ndecore_excel_math_grade8 = t2.ndecore_excel_math_grade8 where t2.state = \"North Carolina\" intersect select t1.score from ndecore_excel_math_grade8 as t1 join students as t2 on t1.ndecore_excel_math_grade8 = t2.ndecore_excel_math_grade8 where t2.state = \"South Carolina\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecore_excel_math_grade8'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"North Carolina\" UNION SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"New York\"", "prediction": "select avg(state_code) from ndecoreexcel_math_grade8 where state = 'NC' intersect select avg(state_code) from ndecoreexcel_math_grade8 where state = 'NY'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state_code"}, {"query": "SELECT count(*) FROM FINREV_FED_17 WHERE c25 > c14", "prediction": "select count(*) from (select t1.state_code from finrev_fed_17 as t1 join school as t2 on t1.school_district = t2.school_district where t2.revenue > t2.revenue)", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'school'"}, {"query": "SELECT DISTINCT commod FROM sampledata15", "prediction": "select distinct t1.food from samplesdata15 as t1 join resultsdata as t2 on t1.sample_pk = t2.sample_pk", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'samplesdata15'"}, {"query": "SELECT commod FROM sampledata15 WHERE origin = 2 AND commod not in (SELECT commod FROM sampledata15 WHERE origin = 1)", "prediction": "select name from sampledata15 where country != 'USA'", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: name"}, {"query": "SELECT T1.growst, avg(T2.concen) FROM sampledata15 as T1 JOIN resultsdata15 as T2 ON T1.sample_pk = T2.sample_pk GROUP BY T1.growst", "prediction": "select avg(t1.result), t1.state from sampledata15 as t1 join pesticide as t2 on t1.sample_pk = t2.sample_pk where t1.country = \"USA\" group by t1.state", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'pesticide'"}, {"query": "SELECT T1.variety FROM resultsdata15 as T2 JOIN sampledata15 as T1 ON T1.sample_pk = T2.sample_pk WHERE T2.commod = \"AP\" GROUP BY T1.variety ORDER BY sum(T2.concen) DESC LIMIT 1", "prediction": "select distinct variety from apple group by variety order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'apple'"}, {"query": "SELECT commod FROM resultsdata15 WHERE concen > lod", "prediction": "select t1.commod from sampledata15 as t1 join resultsdata as t2 on t1.commod = t2.commod join pesticides as t3 on t2.commod = t3.commod where t3.concentration > (select max(concentration) from pesticides)", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'resultsdata'"}, {"query": "SELECT T1.country FROM sampledata15 as T1 JOIN resultsdata15 as T2 ON T1.sample_pk = T2.sample_pk GROUP BY T1.country ORDER BY sum(T2.concen) LIMIT 1", "prediction": "select country, t1.concentration from sampledata15 as t1 join resultsdata as t2 on t1.commod = t2.commod join pesticide as t3 on t2.policy = t3.policy where t3.country = (select country from imports group by country order by count(*) desc limit 1)", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'resultsdata'"}, {"query": "SELECT max(concen) FROM resultsdata15", "prediction": "select max(t2.concentration) from resultsdata15 as t1 join sample as t2 on t1.sample_pk = t2.sample_pk join pesticide as t3 on t1.commod = t3.commod group by t3.commod", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sample'"}, {"query": "SELECT year, month, day FROM sampledata15 WHERE sample_pk = 3763", "prediction": "select date from sampledata15 where sample_pk = 3763", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: date"}, {"query": "SELECT site FROM sampledata15 WHERE sample_pk = 3763", "prediction": "select pestcode from sampledata15 where sample_pk like \"%3763%\"", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: pestcode"}, {"query": "SELECT country FROM sampledata15 WHERE sample_pk = 6480 AND origin = 2", "prediction": "select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: list index out of range"}, {"query": "SELECT quantity FROM sampledata15 WHERE sample_pk = 9628", "prediction": "select count(*) from sampledata15 where 9628 = '9628'", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: 9628"}, {"query": "SELECT confmethod FROM resultsdata15 as T2 JOIN sampledata15 as T1 ON T1.sample_pk = T2.sample_pk ORDER BY year, month, day DESC LIMIT 1", "prediction": "select t1.pestcode from resultsdata15 as t1 join sample as t2 on t1.sample_pk = t2.sample_pk order by t2.year desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sample'"}, {"query": "SELECT conunit FROM resultsdata15 WHERE sample_pk = 3879", "prediction": "select conunit from sampledata15 where sample_pk = 3879", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: conunit"}, {"query": "SELECT conunit FROM resultsdata15 WHERE commod = \"PO\"", "prediction": "select t2.conunit from resultsdata15 as t1 join sample_pk as t2 on t1.sample_pk = t2.sample_pk where t1.commod = \"PO\"", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sample_pk'"}, {"query": "SELECT max(extract) FROM resultsdata15", "prediction": "select confmethod from sampledata15 group by confmethod order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: confmethod"}, {"query": "SELECT commod FROM resultsdata15 WHERE mean = \"A\" GROUP BY commod ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.type from food as t1 join resultsdata15 as t2 on t1.commod = t2.commod where t1.detect = 'detect' group by t1.type order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'food'"}, {"query": "SELECT max(commod) FROM resultsdata15", "prediction": "select t1.type from sampledata15 as t1 join resultsdata15 as t2 on t1.sample_pk = t2.sample_pk group by t1.type order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sampledata15.type'"}, {"query": "SELECT max(pestcode) FROM resultsdata15", "prediction": "select type from testclass group by type order by count(*) asc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'testclass'"}, {"query": "SELECT votedby FROM hall_of_fame WHERE yearid = \"2000\" GROUP BY votedby ORDER BY count(*) DESC LIMIT 1", "prediction": "select voteby from hall_of_fame where year = 2000 group by voteby order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: voteby"}, {"query": "SELECT player_id FROM player_award WHERE year = 2010 AND award_id = \"Rookie of the Year\"", "prediction": "select t2.name from player_award as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 2010 order by t1.votes_first desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.name'"}, {"query": "SELECT min(votes), yearid FROM hall_of_fame WHERE inducted = \"Y\" AND yearid >= 1871 GROUP BY yearid", "prediction": "select min(vote), year from hall_of_fame where year > 1871 group by yearid", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: vote"}, {"query": "SELECT salary FROM salary WHERE league_id = \"NL\"", "prediction": "select salary from salary as t1 join league as t2 on t1.league_id = t2.league_id where t2.name_last = 'National League'", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'league'"}, {"query": "SELECT salary FROM salary WHERE league_id = \"AL\"", "prediction": "select salary from salary where league_id = (select league_id from player where name_last = \"American League\")", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: league_id"}, {"query": "SELECT T1.birth_country FROM hall_of_fame as T2 JOIN player as T1 ON T1.player_id = T2.player_id WHERE T2.inducted = \"Y\" AND T2.yearid >= 1871", "prediction": "select t2.birth_place from hall_of_fame as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 1871", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.birth_place'"}, {"query": "SELECT DISTINCT yearid FROM hall_of_fame WHERE needed_note != \"\"", "prediction": "select distinct year from hall_of_fame where votedby = \"Select Special Election from hall_of_fame\"", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT T1.birth_country FROM player as T1 JOIN hall_of_fame as T2 ON T1.player_id = T2.player_id WHERE T2.inducted = \"Y\" GROUP BY T1.birth_country ORDER BY count(*) DESC LIMIT 10", "prediction": "select birth_country, count(*) from hall_of_fame group by birth_country order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: birth_country"}, {"query": "SELECT T1.player_id, T1.award_id , min(T1.year - T2.birth_year) FROM player_award as T1 JOIN player as T2 ON T1.player_id = T2.player_id GROUP BY T1.award_id", "prediction": "select t1.name, t1.birth_day from player as t1 join player_award as t2 on t1.player_id = t2.player_id order by t1.birth_day desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.name'"}, {"query": "SELECT T1.player_id, T1.award_id , max(T1.year - T2.birth_year) FROM player_award as T1 JOIN player as T2 ON T1.player_id = T2.player_id GROUP BY T1.award_id", "prediction": "select t2.name, t1.year from player_award as t1 join player as t2 on t1.player_id = t2.player_id where t1.birth_year = (select max(birth_year) from player_award where death_city = \"Everly\")", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.name'"}, {"query": "SELECT T2.team_id FROM hall_of_fame as T1 JOIN salary as T2 ON T1.player_id = T2.player_id AND T1.yearid = T2.year WHERE T1.inducted = \"Y\" GROUP BY T2.team_id ORDER BY count(*) DESC LIMIT 10", "prediction": "select t2.team_id from hall_of_fame as t1 join team as t2 on t1.team_id = t2.team_id group by t1.team_id order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'team'"}, {"query": "SELECT avg(T1.weight) FROM player as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id GROUP BY notes", "prediction": "select avg(weight), position from player_award group by position", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: weight"}, {"query": "SELECT player_id FROM player_award_vote WHERE year = \"1971\" ORDER BY points_won DESC LIMIT 1", "prediction": "select name_first, name_last from player where year = 1971 order by score_first desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT league_id FROM player_award WHERE year = \"2006\" GROUP BY league_id ORDER BY count(*) DESC LIMIT 1", "prediction": "select t2.league_id from player_award as t1 join league as t2 on t1.league_id = t2.league_id where t1.year = 2006 group by t1.league_id order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'league'"}, {"query": "SELECT DISTINCT notes FROM player_award WHERE player_id = \"willite01\"", "prediction": "select defense_position from player where player_id = 'willite01'", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: defense_position"}, {"query": "SELECT player_id FROM salary WHERE year = \"2015\" ORDER BY salary DESC LIMIT 1", "prediction": "select t2.name from salary as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 2015 order by t1.salary desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.name'"}, {"query": "SELECT Name FROM nuclear_power_plants ORDER BY Capacity DESC LIMIT 1", "prediction": "select t1.name from nuclear_power_plants as t1 join reactors as t2 on t1.id = t2.id group by t1.id order by sum(t2.capacity) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: 'reactors'"}, {"query": "SELECT Country FROM nuclear_power_plants ORDER BY OperationalFrom LIMIT 1", "prediction": "select country from nuclear_power_plants order by operatingstartat asc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: Error col: operatingstartat"}, {"query": "SELECT Country FROM nuclear_power_plants WHERE Status = \"Under Construction\" GROUP BY Country ORDER BY count(*) DESC LIMIT 1", "prediction": "select country from nuclear_power_plants where operatingto < (select max(operatingto) from nuclear_power_plants)", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: Error col: operatingto"}, {"query": "SELECT Longitude, Latitude FROM nuclear_power_plants WHERE ReactorType = \"BWR\" ORDER BY ConstructionStartAt LIMIT 1", "prediction": "select t1.buildingstartat, t1.location from nuclear_power_plants as t1 join operationalfrom as t2 on t1.id = t2.buildingstartat where t1.refustationtype = \"BWR\"", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: 'operationalfrom'"}, {"query": "SELECT groupName, groupYear FROM torrents", "prediction": "select released, count(*) from torrents group by released", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: released"}, {"query": "SELECT groupName FROM torrents WHERE groupYear > 2000 ORDER BY totalSnatched DESC LIMIT 5", "prediction": "select t2.releasetype from tags as t1 join releases as t2 on t1.releasetype = t2.releasetype where t2.year > 2000 group by t2.releasetype order by count(*) desc limit 5", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'releases'"}, {"query": "SELECT DISTINCT groupName FROM torrents WHERE totalSnatched > 100 AND releaseType = \"album\"", "prediction": "select t1.album from torrents as t1 join tags as t2 on t1.groupid = t2.groupid where t1.download > 100 group by t1.album having count(*) >= 100", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'tags.groupid'"}, {"query": "SELECT T2.groupName FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id WHERE T1.tag = \"houston\" ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select t1.release from torrents as t1 join tags as t2 on t1.groupid = t2.groupid where t2.tag = 'houston' group by t1.release order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'tags.groupid'"}, {"query": "SELECT groupName FROM torrents WHERE artist = \"lasean camry\" AND totalSnatched = (SELECT max(totalSnatched) FROM torrents WHERE artist = \"lasean camry\") UNION SELECT groupName FROM torrents WHERE artist = \"lasean camry\" AND totalSnatched = (SELECT min(totalSnatched) FROM torrents WHERE artist = \"lasean camry\")", "prediction": "select t1.releasetype, count(*) from torrents as t1 join group as t2 on t1.groupid = t2.groupid where t1.artist = \"lasean camry\" group by t1.groupid order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'group'"}, {"query": "SELECT groupName FROM torrents WHERE releaseType = \"album\" ORDER BY totalSnatched DESC LIMIT 10", "prediction": "select album from tags group by album order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: album"}, {"query": "SELECT T1.tag FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id WHERE T2.groupYear >= 2010 GROUP BY T1.tag ORDER BY T2.totalSnatched DESC LIMIT 10", "prediction": "select topics from torrents where groupyear = 2010 group by topics order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: topics"}, {"query": "SELECT groupYear FROM torrents GROUP BY groupYear ORDER BY count(groupName) LIMIT 1", "prediction": "select min(release) from torrents group by min(release)", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: release"}, {"query": "SELECT groupName FROM torrents ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select release from torrents group by release order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: release"}, {"query": "SELECT T1.tag, T2.groupName FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id", "prediction": "select t1.tag from tags as t1 join torrents as t2 on t1.index = t2.groupid where t2.title = \"release\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'torrents.title'"}, {"query": "SELECT groupYear FROM torrents GROUP BY groupYear ORDER BY count(groupName) DESC LIMIT 1", "prediction": "select released from torrents group by released order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: released"}, {"query": "SELECT artist FROM torrents GROUP BY artist ORDER BY avg(totalSnatched) DESC LIMIT 1", "prediction": "select artist, groupid from torrents group by artist order by avg(downloads) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: downloads"}, {"query": "SELECT groupYear FROM torrents GROUP BY groupYear ORDER BY count(groupName) DESC LIMIT 1", "prediction": "select released from torrents group by released order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: released"}, {"query": "SELECT groupName FROM torrents ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select t1.groupname from torrents as t1 join tags as t2 on t1.groupid = t2.groupid group by t1.groupname order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'tags.groupid'"}, {"query": "SELECT sum(totalSnatched), releaseType FROM torrents GROUP BY releaseType", "prediction": "select numbers, releasetype from torrents", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: numbers"}, {"query": "SELECT sum(totalSnatched) FROM torrents WHERE groupYear BETWEEN 2000 AND 2010 UNION SELECT sum(totalSnatched) FROM torrents WHERE groupYear < 2000", "prediction": "select downloaded from tags where tag = \"2000s\" intersect select downloaded from tags where tag < \"2000s\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: downloaded"}, {"query": "SELECT count(*) FROM ( SELECT groupName FROM torrents GROUP BY groupName HAVING count(*) > 1 )", "prediction": "select count(distinct title) from torrents", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: title"}, {"query": "SELECT sum(totalSnatched) FROM torrents WHERE releaseType = \"ep\"  UNION SELECT sum(totalSnatched) FROM torrents WHERE releaseType = \"album\"", "prediction": "select count(*), t1.ep from torrents as t1 join tags as t2 on t1.groupid = t2.groupid where t1.album = 'ep' intersect select count(*) from torrents as t1 join tags as t2 on t1.groupid = t2.groupid where t1.album = 'album'", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'tags.groupid'"}, {"query": "SELECT artist FROM torrents WHERE groupYear > 2010 GROUP BY artist", "prediction": "select artist from torrents where releaseyear > 2010", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: releaseyear"}, {"query": "SELECT CrimeTS FROM GreaterManchesterCrime GROUP BY CrimeTS ORDER BY count(*) DESC LIMIT 1", "prediction": "select time from greatermanchestercrime group by time order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: time"}, {"query": "SELECT Outcome FROM GreaterManchesterCrime WHERE Location LIKE \"%Street%\" GROUP BY Outcome ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.outcome from greatermanchestercrime as t1 join crime as t2 on t1.crimeid = t2.crimeid where t2.location = \"street\"", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: 'crime'"}, {"query": "SELECT Outcome FROM GreaterManchesterCrime WHERE CrimeID = \"6B:E2:54:C6:58:D2\"", "prediction": "select result from greatermanchestercrime where crimeid = \"6B:E2:54:C6:58:D2\"", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: result"}, {"query": "SELECT * FROM Fires WHERE State = \"TX\" AND STAT_CAUSE_DESCR LIKE \"Campfire\"", "prediction": "select distinct t1.flame_size_class from fires as t1 join state as t2 on t1.state = t2.state where t2.flame_name = \"Texas\"", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'state'"}, {"query": "SELECT OWNER_DESCR FROM FIres WHERE State = \"OR\" AND FIRE_YEAR = 2015 ORDER BY FIRE_SIZE DESC LIMIT 1", "prediction": "select t1.owner_code from fires as t1 join the state as t2 on t1.state = t2.state where t1.fips_name = \"Oregon\" and t1.year = 2015", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'the'"}, {"query": "SELECT count(*) FROM Fires WHERE FIRE_YEAR = 2010 AND STAT_CAUSE_DESCR LIKE \"%Arson%\"", "prediction": "select count(*) from fires where year = 2010", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT count(DISTINCT FIRE_YEAR) FROM Fires", "prediction": "select count(*) from database", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'database'"}, {"query": "SELECT avg(DISCOVERY_DATE) FROM Fires where FIRE_YEAR BETWEEN 2000 AND 2004", "prediction": "select avg(discovery_date) from fires where discovery_year between 2000 and 2004", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: discovery_year"}, {"query": "SELECT COUNTY FROM Fires GROUP BY COUNTY ORDER BY count(*)", "prediction": "select county from fires where year = 2000 group by county order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE State = \"NY\" and FIRE_YEAR = \"2006\"", "prediction": "select sum(t1.acreage) from fires as t1 join state as t2 on t1.state = t2.state where t1.state = \"NC\" and t1.year = 2006", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'state'"}, {"query": "SELECT * FROM Fires WHERE State = \"UT\" AND FIRE_YEAR = 1997 ORDER BY FIRE_SIZE DESC LIMIT 1", "prediction": "select t1.fate_size from fires as t1 join the state as t2 on t1.state = t2.state where t1.fate_name = \"Utah\" and t1.year = 1997", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'the'"}, {"query": "SELECT count(*) FROM Fires WHERE COUNTY = \"Gloucester\" AND FIRE_SIZE > 10", "prediction": "select count(*) from wildfires where county = \"Gloucester\" and fire_size > 10", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'wildfires'"}, {"query": "SELECT OWNER_DESCR FROM Fires GROUP BY OWNER_DESCR ORDER BY count(*) DESC LIMIT 1", "prediction": "select type_of_land, count(*) from fires group by type_of_land order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: type_of_land"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE State = \"TX\" AND FIRE_YEAR BETWEEN 2000 AND 2010", "prediction": "select sum(t1.acreage) from fires as t1 join the state as t2 on t1.state = t2.state where t1.fips_name = \"Texas\" and t1.year between 2000 and 2010", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'the'"}, {"query": "SELECT STAT_CAUSE_DESCR FROM Fires GROUP BY STAT_CAUSE_DESCR ORDER BY count(*) DESC LIMIT 1", "prediction": "select cont_code from fires group by cont_code order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: cont_code"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires", "prediction": "select sum(cont_area) from fires", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: cont_area"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE STATE = \"TX\" AND FIRE_YEAR BETWEEN 2000 AND 2010  UNION SELECT sum(FIRE_SIZE) FROM Fires WHERE STATE = \"TX\" AND FIRE_YEAR BETWEEN 1990 AND 2000", "prediction": "select count(*) from fires where year = 2000 and year = 1990", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT count(*) FROM Fires WHERE OWNER_DESCR = \"MISSING/NOT SPECIFIED\"", "prediction": "select count(*) from fires where owner_code not in (select t1.owner_code from fires as t1 join)", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: ')'"}, {"query": "SELECT LATITUDE FROM Fires GROUP BY LATITUDE ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.latitudinal band from fires as t1 join in as t2 on t1.latitudinal = t2.latitudinal group by t1.latitudinal order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'in'"}]