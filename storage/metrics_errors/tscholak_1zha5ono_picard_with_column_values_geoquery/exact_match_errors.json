[{"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ) ;", "prediction": "select t2.river_name from city as t1 join river as t2 on t1.city_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 AND LAKEalias0.STATE_NAME = \"michigan\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"delaware\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"ohio\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"chattahoochee\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"chattahoochee\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"potomac\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"red\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select distinct t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"ohio\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"washington\" ) AND RIVERalias0.TRAVERSE = \"washington\" ;", "prediction": "select max(t2.length) from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"florida\" ) AND RIVERalias0.TRAVERSE = \"florida\" ;", "prediction": "select max(length) from river where state_name = \"fla.", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Unexpected quote"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select max(t2.length) from state as t1 join river as t2 on t1.state_name = (select t1.state_name from state as t1 join highlow as t2 on t1.state_name = t2.state_name where t1.state_name = \"texas\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.length'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"california\" ) AND RIVERalias0.TRAVERSE = \"california\" ;", "prediction": "select max(length) from river where state_name = \"california\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"idaho\" ;", "prediction": "select count(*) from river where state_name = 'idaho\" != \"NEW != \"idaho\" != \"NEW != \"Idaho\" != \"NEW != \"Idaho\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Unexpected quote"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"alaska\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"alaska\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"maine\" ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 ;", "prediction": "select count(*) from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"dallas\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"portland\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"fort wayne\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION > ( SELECT HIGHLOWalias1.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = \"colorado\" ) ;", "prediction": "select state_name from state where max(highest_point) > (select max(highest_point) from highlow where", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highest_point"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION > ( SELECT HIGHLOWalias1.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = \"colorado\" ) ;", "prediction": "select state.state_name from city as t1 join highlow as t2 on t1.city_name = t2.state_", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.state_'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"alabama\" ;", "prediction": "select max(max(high", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"mississippi\" ) ;", "prediction": "select t2.high", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH IN ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias0 ) FROM ( SELECT MAX( RIVERalias1.LENGTH ) AS DERIVED_FIELDalias0 , RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias2.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias2 GROUP BY BORDER_INFOalias2.BORDER ) AS DERIVED_TABLEalias0 ) ) ) GROUP BY RIVERalias1.TRAVERSE ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select max(t2.length) from border_info as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(max(mountain_", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(max(mountain_", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"virginia\" ;", "prediction": "select max(max(mountain_", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"wyoming\" ;", "prediction": "select high", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"wyoming\" ;", "prediction": "select max(max(", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"ohio\" ;", "prediction": "select max(max(high", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"kansas\" ;", "prediction": "select max(max(highlow", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT COUNT( HIGHLOWalias0.STATE_NAME ) FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION < ( SELECT HIGHLOWalias1.LOWEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = \"alabama\" ) ;", "prediction": "select count(*) from state as t1 join highlow as t2 on t1.state_name = t2.state_name where t2.", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: t2"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = \"san francisco\" ;", "prediction": "select max(e", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = \"guadalupe peak\" ;", "prediction": "select max(t2.highest_elevation) from mountain as t1 join highlow as t2 on t1.mountain_name = t2.mountain_", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.mountain_'"}, {"query": "SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "prediction": "select highest_elevation", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "prediction": "select highest_point from highlow where country_name = \"usa \" and highest_elevation = (select max(highest_point) from highlow where country_name = \"usa\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"california\" ) AND RIVERalias0.TRAVERSE = \"california\" ;", "prediction": "select max(length) from river where state_name = \"california\" -", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( RIVERalias0.RIVER_NAME ) AS DERIVED_FIELDalias0 , RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ) AS DERIVED_TABLEalias0 ;", "prediction": "select count(*) from state order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT COUNT( DISTINCT STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ) ;", "prediction": "select count(*) from state where state_name not in (select state_name from river", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"florida\" ;", "prediction": "select major_name from river where state_name = \"florida\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"ohio\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.CAPITAL FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select t2.capital from border_info as t1 join city on t1.state_name = (select t1.state_name from city as t1 join border_info as t2 on t1.state_name = t2.state", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.state'"}, {"query": "SELECT STATEalias0.CAPITAL FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select capital from state where border = 'texas' and state_name = 'Texas", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Unexpected quote"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select population from state where border = 'texas\" != \"Texas\" != \"Geoquery\" != \"Texas\" \"Birds\" and \"Texas \"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select t1.capital from state as t1 join river as t2 on t1.state_name = t2.state_", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select max(highest_point) from highlow where country_name = \"USA\" and highest_elevation = (select max(highest_point) from highlow where country_name = \"usa\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select max(highest_point) from highlow where country_name = \"usa", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Unexpected quote"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select length from river group by length order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select length from river group by length order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select length from river group by length order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select length from river group by length order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 ) ) ) AND RIVERalias0.TRAVERSE IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.AREA = ( SELECT MAX( STATEalias3.AREA ) FROM STATE AS STATEalias3 ) ) ;", "prediction": "select max(length) from river order by state_name desc", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"tennessee\" ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"tennessee\" ) ;", "prediction": "select length from river where border = 'tennessee' and state_name = 'tennessee\" != \"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Unexpected quote"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = \"tennessee\" AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select length from river where border = 'tennessee' and state_name = 'tennessee\" != \"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Unexpected quote"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = ( SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( CITYalias0.CITY_NAME ) DESC LIMIT 1 ) ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select length from river where state_name = (select t1.state_name from state as t1 join city as t2 on t1.state_name = t2.state_", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select population from state group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join highlow as t2 on t1.state_name = t2.state_name join river as t3 on t2.", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: t2"}, {"query": "SELECT SUM( DERIVED_TABLEalias0.LENGTH ) FROM ( SELECT DISTINCT RIVERalias0.RIVER_NAME , RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 ) AS DERIVED_TABLEalias0 ;", "prediction": "select sum(length) from river where country_name = \"usa\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'as'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.river_name from river as t1 join city as t2 on t1.river_name = t2.state_name group by t2.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"new mexico\" ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select river_name from river where state_name = (select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select river_name from river where border = (select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"pennsylvania\" ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "prediction": "select state_name from state where border = \"pensylvania\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"pennsylvania\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"pennsylvania\" ) ;", "prediction": "select state_name from state where border = \"pensylvania\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT DISTINCT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"pennsylvania\" AND STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"pennsylvania\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from state where border = \"pensylvania\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ) ) ;", "prediction": "select t1.state_name from state as t1 join highlow as t2 on t1.state_name = t2.state_name join river as t3 on t2.", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: t2"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( DISTINCT RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select state_name from city group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select state_name from city group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias2.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias2 GROUP BY BORDER_INFOalias2.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join city as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 WHERE CITYalias1.POPULATION > 150000 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select distinct t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select t1.density from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"austin\" ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"atlanta\" ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MIN( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select distinct t2.river_name from city as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"idaho\" ) ) AND HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"idaho\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = 'idaho' order by t2.lowest_point", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.lowest_point'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = \"whitney\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = \"whitney\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ;", "prediction": "select distinct t1.state_name from state as t1 join", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: list index out of range"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"alaska\" ) AND RIVERalias0.TRAVERSE = \"alaska\" ;", "prediction": "select min(t2.length) from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"alaska\" ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "prediction": "select min(t2.length) from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select min(length) from river where state_name = \"texas\" and", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ORDER BY RIVERalias0.LENGTH LIMIT 1 ;", "prediction": "select min(length) from river where state_name = \"texas\" and", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ) ;", "prediction": "select capital from state where border = 'texas' and state_name = 'Texas", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Unexpected quote"}, {"query": "SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE ( HIGHLOWalias0.STATE_NAME = BORDER_INFOalias0.BORDER ) AND ( STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ) AND HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join highlow as t3 on t1.state_name = t3.state_name order by t3.lowest_point limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: "}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.CAPITAL FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "prediction": "select capital from state order by max(highest_point) desc", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highest_point"}, {"query": "SELECT STATEalias0.CAPITAL FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "prediction": "select capital from state order by highest_elevation desc", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highest_elevation"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT SUM( STATEalias0.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select sum(population) from state where border = 'texas\" != \"Texas\" != \"Texas\" != \"Texas\" != \"Texas\" != \"Texas \"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( DISTINCT RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select count(*) from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias0 ON STATEalias0.STATE_NAME = BORDER_INFOalias0.STATE_NAME WHERE STATEalias0.STATE_NAME <> \"alaska\" AND STATEalias0.STATE_NAME <> \"hawaii\" GROUP BY STATEalias0.STATE_NAME HAVING COUNT( BORDER_INFOalias0.BORDER ) = ( SELECT MIN( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias0 , STATEalias1.STATE_NAME FROM STATE AS STATEalias1 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias1 ON STATEalias1.STATE_NAME = BORDER_INFOalias1.STATE_NAME WHERE STATEalias1.STATE_NAME <> \"alaska\" AND STATEalias1.STATE_NAME <> \"hawaii\" GROUP BY STATEalias1.STATE_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.state_name = 'alaska' intersect select t1.border from border_info as t1 join state as t2 on t1.state_name = t2.state_name where t2.state_name = 'hawaii'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'left'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"rio grande\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"rio grande\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION IN ( SELECT DERIVED_TABLEalias1.DERIVED_FIELDalias0 FROM ( SELECT MAX( CITYalias1.POPULATION ) AS DERIVED_FIELDalias0 , STATEalias0.STATE_NAME FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = CITYalias1.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) GROUP BY STATEalias0.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select max(population) from city where state_name = (select state_name from border_info order by state_name desc limit 1)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select state_name from city group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT SUM( STATEalias0.POPULATION ) / SUM( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "prediction": "select avg(population) from city where state_name like \"%us%\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: /"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT STATEalias1.STATE_NAME FROM STATE AS STATEalias1 WHERE STATEalias1.AREA = ( SELECT MAX( STATEalias2.AREA ) FROM STATE AS STATEalias2 ) ) ;", "prediction": "select min(lowest_point), state_name from", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Default tables should not be None or empty"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( DERIVED_TABLEalias0.POPULATION ) FROM ( SELECT CITYalias1.POPULATION FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from state order by capital asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'as'"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select capital from state group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 , RIVER AS RIVERalias0 WHERE ( RIVERalias0.RIVER_NAME = \"mississippi\" ) AND ( RIVERalias0.TRAVERSE = HIGHLOWalias1.STATE_NAME ) ) ;", "prediction": "select t1.state_name from state as t1 join highlow as t2 on t1.state_name = t2.state_name where t2.lowest_point = (select min(lowest_point) from highlow)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: "}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > ALL ( SELECT RIVERalias1.LENGTH FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"red\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select count(*) from river where length > 'red'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: all"}, {"query": "SELECT STATEalias0.COUNTRY_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"new hampshire\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias0 ON STATEalias0.STATE_NAME = BORDER_INFOalias0.STATE_NAME GROUP BY STATEalias0.STATE_NAME HAVING COUNT( BORDER_INFOalias0.BORDER ) = ( SELECT MIN( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias0 , STATEalias1.STATE_NAME FROM STATE AS STATEalias1 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias1 ON STATEalias1.STATE_NAME = BORDER_INFOalias1.STATE_NAME GROUP BY STATEalias1.STATE_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'left'"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT HIGHLOWalias0.LOWEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_POINT = \"death valley\" ;", "prediction": "select", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.LENGTH > 750 AND RIVERalias1.TRAVERSE = \"virginia\" ) ) ;", "prediction": "select t1.city_name, t1.state_name from city as t1 join river as t2 on t1.city_name = (select t1.city_name from city as t3 join state as t4 on t3.state_name = t4.state_name where t2.", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: t2"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ;", "prediction": "select state_name from state where border != 'Texas' and state_name != 'Texas\" !=", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}]