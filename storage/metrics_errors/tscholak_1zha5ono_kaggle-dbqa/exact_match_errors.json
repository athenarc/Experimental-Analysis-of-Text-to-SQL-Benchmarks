[{"query": "SELECT AwayTeam FROM football_data WHERE HomeTeam = \"Omiya Ardija\" AND Season LIKE \"%2018%\"", "prediction": "select t2.AwayTeam from betfront as t1 join soccer_data as t2 on t1.facility = t2.hometeam where t1.year = 2018 and t2.away_cLOSING = \"OMIYA ARDIJA\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'soccer_data'"}, {"query": "SELECT MATCH FROM betfront ORDER BY DRAW_OPENING DESC LIMIT 1", "prediction": "select t2.MATCH from betfront as t1 join match as t2 on t1.match = t2.match_br where t1.DRAW_OPENING = (select max(DRAW_OPENING) from betfront)", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'match'"}, {"query": "SELECT count(*) FROM football_data WHERE PSH != \"\" AND PSD != \"\" AND PSA != \"\"", "prediction": "select count(*) from betfront where home_office = 'Pinnacle'", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: home_office"}, {"query": "SELECT count(*) FROM football_data WHERE B365H > PSH", "prediction": "select count(*) from betfront where HOME_OPENING > 'Pinnacle' and avg(HOT) > 'BWA'", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: hot"}, {"query": "SELECT count(*) FROM football_data WHERE FTHG + FTAG > 5", "prediction": "select count(*) from betfront where total(*) > 5", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: total"}, {"query": "SELECT count(*) FROM football_data WHERE FTHG = 0 AND FTAG = 0", "prediction": "select count(*) from betfront where 0 = 0-0 and 0 = 0", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: 0"}, {"query": "SELECT B365D FROM football_data WHERE HomeTeam = \"Swindon\" and AwayTeam = \"Millwall\" and Season = \"2016/2017\"", "prediction": "select t1.DRAW_OPENING from betfront as t1 join the game as t2 on t1.B365H = t2.B365H where t2.Swindon = 'Swindon' and t2.Millwall = 'Millwall'", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'the'"}, {"query": "SELECT T1.school_district FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Wisconsin\" ORDER BY T1.t_fed_rev DESC LIMIT 1", "prediction": "select school_district from FINREV_FED_17 where state_code = 'Wisconsin' group by school_district order by sum(t1.t_fed_rev) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 't1'"}, {"query": "SELECT avg(T1.c14) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Virginia\"", "prediction": "select avg(t1.t_fed_rev) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code where t2.title = 'T1.title 1'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T2.state, sum(c14),sum(c25) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY T3.average_scale_score DESC LIMIT 10", "prediction": "select state, avg(mean_scale_score), t1.c25 from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.c25", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, max(T1.c14), T3.average_scale_score FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state UNION SELECT T1.school_district, max(T1.c25), T3.average_scale_score FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district, avg(t1.avg(t1.state) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.school_district", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, max(T1.t_fed_rev / T3.average_scale_score) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 on T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.school_district = t2.school_district group by t1.school_district order by sum(t2.amount) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.school_district'"}, {"query": "SELECT T2.state, T3.average_scale_score FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY sum(T1.t_fed_rev) DESC LIMIT 1", "prediction": "select t1.state, avg(t1.average_scale_score) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.state_code order by avg(t1.average_scale_score) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, min(T1.t_fed_rev / T3.average_scale_score) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 on T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.school_district = t2.school_district group by t1.school_district order by sum(t2.t_fed_rev) limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.school_district'"}, {"query": "SELECT T2.state, T3.average_scale_score FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY sum(T1.t_fed_rev) LIMIT 1", "prediction": "select t1.state, avg(t1.average_scale_score) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.state_code", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"California\"", "prediction": "select avg(avg(match_score) from NDECoreExcel_Math_Grade8 where state = 'CA'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: match_score"}, {"query": "SELECT T2.state FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code GROUP BY T2.state ORDER BY sum(t_fed_rev) DESC LIMIT 1", "prediction": "select state from FINREV_FED_17 order by t_fed_rev desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state"}, {"query": "SELECT sum(T1.c14), sum(T1.c25) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Colorado\"", "prediction": "select t1.state_code, t1.t_fed_rev, t3.c25 from FINREV_FED_2017 as t1 join school as t2 on t1.school_district = t2.school_district where t2.title = 'Title 1' intersect select t1.state_code, t1.t_fed_rev from FINREV_FED_2017 as t1 join school as t2 on t1.school_district = t2.school_district where t2.title = 'Child Nutrition'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'finrev_fed_2017'"}, {"query": "SELECT t_fed_rev FROM FINREV_FED_17 WHERE school_district LIKE \"%Pecatonia Area%\"", "prediction": "select sum(t1.t_fed_rev) from FINREV_FED_17 as t1 join school as t2 on t1.school_district = t2.school_district where t2.school_district in (select school_district from FINREV_FED_17)", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'school'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"North Carolina\" UNION SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"South Carolina\"", "prediction": "select t1.avg(t1.score) from NDECoreExcel_Math_Grade8 as t1 join students as t2 on t1.all_students = t2.students where t1.year = 8 and t2.state = \"South Carolina\" intersect select t1.score from NDECoreExcel_Math_Grade8 as t1 join students as t2 on t1.all_students = t2.students where t1.year = 9 and t2.state = \"South Carolina\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'students'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"North Carolina\" UNION SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"New York\"", "prediction": "select avg(state_code) from NDECoreExcel_Math_Grade8 where state = 'NC' intersect select avg(state_code) from NDECoreExcel_Math_Grade8 where state = 'NY'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state_code"}, {"query": "SELECT count(*) FROM FINREV_FED_17 WHERE c25 > c14", "prediction": "select count(*) from (select t1.state_code from FINREV_FED_17 as t1 join school as t2 on t1.school_district = t2.school_district where t2.revenue > t2.revenue)", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'school'"}, {"query": "SELECT DISTINCT commod FROM sampledata15", "prediction": "select distinct t1.food from samplesdata15 as t1 join resultsdata as t2 on t1.sample_pk = t2.sample_pk", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'samplesdata15'"}, {"query": "SELECT commod FROM sampledata15 WHERE origin = 2 AND commod not in (SELECT commod FROM sampledata15 WHERE origin = 1)", "prediction": "select name from sampledata15 where country!= 'USA'", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: name"}, {"query": "SELECT T1.growst, avg(T2.concen) FROM sampledata15 as T1 JOIN resultsdata15 as T2 ON T1.sample_pk = T2.sample_pk GROUP BY T1.growst", "prediction": "select avg(t1.result), t1.state from sampledata15 as t1 join pesticide as t2 on t1.sample_pk = t2.sample_pk where t1.country = \"USA\" group by t1.state", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'pesticide'"}, {"query": "SELECT T1.variety FROM resultsdata15 as T2 JOIN sampledata15 as T1 ON T1.sample_pk = T2.sample_pk WHERE T2.commod = \"AP\" GROUP BY T1.variety ORDER BY sum(T2.concen) DESC LIMIT 1", "prediction": "select distinct variety from apple group by variety order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'apple'"}, {"query": "SELECT commod FROM resultsdata15 WHERE concen > lod", "prediction": "select t1.commod from sampledata15 as t1 join resultsdata as t2 on t1.commod = t2.commod join pesticides as t3 on t2.commod = t3.commod where t3.concentration > (select max(concentration) from pesticides)", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'resultsdata'"}, {"query": "SELECT T1.country FROM sampledata15 as T1 JOIN resultsdata15 as T2 ON T1.sample_pk = T2.sample_pk GROUP BY T1.country ORDER BY sum(T2.concen) LIMIT 1", "prediction": "select country, t1.concentration from sampledata15 as t1 join resultsdata as t2 on t1.commod = t2.commod join pesticide as t3 on t2.policy = t3.policy where t3.country = (select country from imports group by country order by count(*) desc limit 1)", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'resultsdata'"}, {"query": "SELECT max(concen) FROM resultsdata15", "prediction": "select max(t2.concentration) from resultsdata15 as t1 join sample as t2 on t1.sample_pk = t2.sample_pk join pesticide as t3 on t1.commod = t3.commod group by t3.commod", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sample'"}, {"query": "SELECT year, month, day FROM sampledata15 WHERE sample_pk = 3763", "prediction": "select date from sampledata15 where sample_pk = 3763", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: date"}, {"query": "SELECT site FROM sampledata15 WHERE sample_pk = 3763", "prediction": "select pestcode from sampledata15 where sample_pk like \"%3763%\"", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: pestcode"}, {"query": "SELECT country FROM sampledata15 WHERE sample_pk = 6480 AND origin = 2", "prediction": "select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15 where sample_pk in (select origin from sampledata15", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: list index out of range"}, {"query": "SELECT quantity FROM sampledata15 WHERE sample_pk = 9628", "prediction": "select count(*) from sampledata15 where 9628 = '9628'", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: 9628"}, {"query": "SELECT confmethod FROM resultsdata15 as T2 JOIN sampledata15 as T1 ON T1.sample_pk = T2.sample_pk ORDER BY year, month, day DESC LIMIT 1", "prediction": "select t1.pestcode from resultsdata15 as t1 join sample as t2 on t1.sample_pk = t2.sample_pk order by t2.year desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sample'"}, {"query": "SELECT conunit FROM resultsdata15 WHERE sample_pk = 3879", "prediction": "select conunit from sampledata15 where sample_pk = 3879", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: conunit"}, {"query": "SELECT conunit FROM resultsdata15 WHERE commod = \"PO\"", "prediction": "select t2.conunit from resultsdata15 as t1 join product as t2 on t1.product = t2.commod where t2.policy = \"PO\"", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'product'"}, {"query": "SELECT mean FROM resultsdata15 WHERE commod = \"AP\"", "prediction": "select avg(mean) from resultsdata15 where product = 'AP'", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: product"}, {"query": "SELECT max(extract) FROM resultsdata15", "prediction": "select confmethod from sampledata15 group by confmethod order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: confmethod"}, {"query": "SELECT lab FROM resultsdata15 WHERE commod = \"AP\"", "prediction": "select t1.lab from resultsdata15 as t1 join testclass as t2 on t1.testclass = t2.testclass where t2.prodict = 'AP'", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'testclass'"}, {"query": "SELECT commod FROM resultsdata15 WHERE mean = \"A\" GROUP BY commod ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.type from food as t1 join resultsdata15 as t2 on t1.commod = t2.commod where t1.detect = 'detect' group by t1.type order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'food'"}, {"query": "SELECT max(commod) FROM resultsdata15", "prediction": "select t1.type from sampledata15 as t1 join resultsdata15 as t2 on t1.sample_pk = t2.sample_pk group by t1.type order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sampledata15.type'"}, {"query": "SELECT max(pestcode) FROM resultsdata15", "prediction": "select type from testclass group by type order by count(*) asc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'testclass'"}, {"query": "SELECT votedby FROM hall_of_fame WHERE yearid = \"2000\" GROUP BY votedby ORDER BY count(*) DESC LIMIT 1", "prediction": "select voteby from hall_of_fame where year = 2000 group by voteby order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: voteby"}, {"query": "SELECT player_id FROM player_award WHERE year = 2010 AND award_id = \"Rookie of the Year\"", "prediction": "select t2.name from player_award as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 2010 order by t2.votes_first desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.name'"}, {"query": "SELECT T2.salary FROM salary as T2 JOIN hall_of_fame as T1 ON T1.player_id = T2.player_id WHERE T1.inducted = \"Y\"", "prediction": "select salary from salary as t1 join player as t2 on t1.player_id = t2.player_id join hall_of_fame as t3 on t1.hall_of_fame = t3.hall_of_fame", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'salary.hall_of_fame'"}, {"query": "SELECT min(votes), yearid FROM hall_of_fame WHERE inducted = \"Y\" AND yearid >= 1871 GROUP BY yearid", "prediction": "select min(vote), year from hall_of_fame where year > 1871 group by yearid", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: vote"}, {"query": "SELECT salary FROM salary WHERE league_id = \"NL\"", "prediction": "select salary from salary as t1 join league as t2 on t1.league_id = t2.league_id where t2.name = \"National League\"", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'league'"}, {"query": "SELECT salary FROM salary WHERE league_id = \"AL\"", "prediction": "select salary from salary as t1 join league as t2 on t1.league_id = t2.league_id where t2.name = \"American League\"", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'league'"}, {"query": "SELECT T1.birth_country FROM hall_of_fame as T2 JOIN player as T1 ON T1.player_id = T2.player_id WHERE T2.inducted = \"Y\" AND T2.yearid >= 1871", "prediction": "select t2.birth_place from hall_of_fame as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 1871", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.birth_place'"}, {"query": "SELECT DISTINCT yearid FROM hall_of_fame WHERE needed_note != \"\"", "prediction": "select distinct year from hall_of_fame", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT T1.birth_country FROM player as T1 JOIN hall_of_fame as T2 ON T1.player_id = T2.player_id WHERE T2.inducted = \"Y\" GROUP BY T1.birth_country ORDER BY count(*) DESC LIMIT 10", "prediction": "select birth_country, count(*) from hall_of_fame group by birth_country order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: birth_country"}, {"query": "SELECT T1.player_id, T1.award_id , min(T1.year - T2.birth_year) FROM player_award as T1 JOIN player as T2 ON T1.player_id = T2.player_id GROUP BY T1.award_id", "prediction": "select t1.name, t1.birth_day from player as t1 join player_award as t2 on t1.player_id = t2.player_id order by t1.birth_day desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.name'"}, {"query": "SELECT T1.player_id, T1.award_id , max(T1.year - T2.birth_year) FROM player_award as T1 JOIN player as T2 ON T1.player_id = T2.player_id GROUP BY T1.award_id", "prediction": "select award_id, max(birth_year) from player_award group by award_id order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: birth_year"}, {"query": "SELECT T2.team_id FROM hall_of_fame as T1 JOIN salary as T2 ON T1.player_id = T2.player_id AND T1.yearid = T2.year WHERE T1.inducted = \"Y\" GROUP BY T2.team_id ORDER BY count(*) DESC LIMIT 10", "prediction": "select t2.team_id from hall_of_fame as t1 join team as t2 on t1.team_id = t2.team_id group by t1.team_id order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'team'"}, {"query": "SELECT avg(T1.weight) FROM player as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id GROUP BY notes", "prediction": "select avg(weight), position from player_award group by position", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: weight"}, {"query": "SELECT player_id FROM player_award_vote WHERE year = \"1971\" ORDER BY points_won DESC LIMIT 1", "prediction": "select t2.name from player_award as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 1971 order by t1.points_max desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.name'"}, {"query": "SELECT league_id FROM player_award WHERE year = \"2006\" GROUP BY league_id ORDER BY count(*) DESC LIMIT 1", "prediction": "select t2.league_id from player_award as t1 join league as t2 on t1.league_id = t2.league_id where t1.year = 2006 group by t1.league_id order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'league'"}, {"query": "SELECT DISTINCT notes FROM player_award WHERE player_id = \"willite01\"", "prediction": "select defense_position from player where player_id = 'willite01'", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: defense_position"}, {"query": "SELECT avg(T1.weight) FROM player as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id WHERE T2.award_id = \"TSN All-Star\" AND notes = \"3B\"", "prediction": "select avg(t1.weight) from player as t1 join player_award as t2 on t1.player_id = t2.player_id where t2.award_id = 'TSN' and t1.year = 2004", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.year'"}, {"query": "SELECT player_id FROM salary WHERE year = \"2015\" ORDER BY salary DESC LIMIT 1", "prediction": "select t2.name from salary as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 2015 order by t1.salary desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.name'"}, {"query": "SELECT Name FROM nuclear_power_plants where Status = \"Operational\" and Country = \"Japan\"", "prediction": "select Operational_from from nuclear_power_plants where Country = \"Japan\"", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: Error col: operational_from"}, {"query": "SELECT Longitude, Latitude FROM nuclear_power_plants WHERE ReactorType = \"BWR\" ORDER BY ConstructionStartAt LIMIT 1", "prediction": "select t1.name, t1.location from nuclear_power_plants as t1 join OperationalFrom as t2 on t1.id = t2.ContructionStartAt join nuclear_power_plants as t3 on t2.reactormodel = t3.id where t3.reactortype = 'BWR'", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: 'operationalfrom'"}, {"query": "SELECT groupName, groupYear FROM torrents", "prediction": "select count(*), t1.releaseType from torrents as t1 join tags as t2 on t1.groupName = t2.groupId group by t1.releaseType", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'tags.groupid'"}, {"query": "SELECT groupName, artist FROM torrents", "prediction": "select * from torrents as t1 join group as t2 on t1.groupId = t2.groupId", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'group'"}, {"query": "SELECT groupName FROM torrents WHERE groupYear > 2000 ORDER BY totalSnatched DESC LIMIT 5", "prediction": "select releaseType from torrents where year > 2000 group by releaseType order by count(*) desc limit 5", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT DISTINCT groupName FROM torrents WHERE totalSnatched > 100 AND releaseType = \"album\"", "prediction": "select t1.album from torrents as t1 join files as t2 on t1.groupId = t2.groupId group by t1.groupId having count(*) > 100", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'files'"}, {"query": "SELECT T2.groupName FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id WHERE T1.tag = \"houston\" ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select t1.releaseType from torrents as t1 join group as t2 on t1.groupId = t2.groupId group by t1.releaseType order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'group'"}, {"query": "SELECT groupName FROM torrents WHERE artist = \"lasean camry\" AND totalSnatched = (SELECT max(totalSnatched) FROM torrents WHERE artist = \"lasean camry\") UNION SELECT groupName FROM torrents WHERE artist = \"lasean camry\" AND totalSnatched = (SELECT min(totalSnatched) FROM torrents WHERE artist = \"lasean camry\")", "prediction": "select max(t1.releaseType), min(t1.releaseType) from torrents as t1 join artists as t2 on t1.artist = t2.artist group by t2.artist order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'artists'"}, {"query": "SELECT groupName FROM torrents WHERE releaseType = \"album\" ORDER BY totalSnatched DESC LIMIT 10", "prediction": "select t2.albumname, count(*) from torrents as t1 join albums as t2 on t1.groupName = t2.groupId group by t2.albumName order by count(*) desc", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'albums'"}, {"query": "SELECT T1.tag FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id WHERE T2.groupYear >= 2010 GROUP BY T1.tag ORDER BY T2.totalSnatched DESC LIMIT 10", "prediction": "select t1.name from files as t1 join torrents as t2 on t1.zip = t2.zip where t1.year > 2010 group by t1.name order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'files'"}, {"query": "SELECT groupYear FROM torrents GROUP BY groupYear ORDER BY count(groupName) LIMIT 1", "prediction": "select year from torrents group by year order by count(*) asc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT T1.tag, T2.groupName FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id", "prediction": "select t1.tag from tags as t1 join torrents as t2 on t1.index = t2.id join releases as t3 on t2.releaseType = t3.id", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'releases'"}, {"query": "SELECT groupName FROM torrents ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select t1.CDKit from torrents as t1 join group as t2 on t1.groupId = t2.groupId group by t1.CDKit order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'group'"}, {"query": "SELECT artist FROM torrents GROUP BY artist ORDER BY sum(totalSnatched) DESC LIMIT 1", "prediction": "select t1.name from CDs as t1 join torrents as t2 on t1.groupName = t2.groupId group by t1.name order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'cds'"}, {"query": "SELECT sum(totalSnatched), releaseType FROM torrents GROUP BY releaseType", "prediction": "select count(*), t1.releaseType from torrents as t1 join tags as t2 on t1.groupName = t2.groupId", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'tags.groupid'"}, {"query": "SELECT sum(totalSnatched) FROM torrents WHERE groupYear BETWEEN 2000 AND 2010 UNION SELECT sum(totalSnatched) FROM torrents WHERE groupYear < 2000", "prediction": "select downloaded(*) from torrents where totalSnatched < 2000", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: downloaded"}, {"query": "SELECT sum(totalSnatched) FROM torrents WHERE releaseType = \"ep\"  UNION SELECT sum(totalSnatched) FROM torrents WHERE releaseType = \"album\"", "prediction": "select count(*), t1.ep from files as t1 join torrents as t2 on t1.groupId = t2.groupId group by t1.ep", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'files'"}, {"query": "SELECT artist FROM torrents WHERE groupYear > 2010 GROUP BY artist", "prediction": "select actor from torrents where releaseType > 2010", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: actor"}, {"query": "SELECT CrimeTS FROM GreaterManchesterCrime GROUP BY CrimeTS ORDER BY count(*) DESC LIMIT 1", "prediction": "select time from crime group by time order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: 'crime'"}, {"query": "SELECT Outcome FROM GreaterManchesterCrime WHERE Location LIKE \"%Street%\" GROUP BY Outcome ORDER BY count(*) DESC LIMIT 1", "prediction": "select t2.Outcome from GreaterManchesterCrime as t1 join police as t2 on t1.crimeID = t2.crimeID where t1.location = \"street\"", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: 'police'"}, {"query": "SELECT Location FROM GreaterManchesterCrime GROUP BY Location ORDER BY count(*) DESC LIMIT 3", "prediction": "select t1.location from GreaterManchesterCrime as t1 join crime as t2 on t1.crimeID = t2.crimeID order by t2.outcome desc limit 3", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: 'crime'"}, {"query": "SELECT count(*) FROM GreaterManchesterCrime WHERE Type LIKE \"%Drug%\"", "prediction": "select count(*) from crimes where type = \"Drugs\"", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: 'crimes'"}, {"query": "SELECT count(*) FROM GreaterManchesterCrime WHERE Outcome LIke \"%Under investigation%\"", "prediction": "select count(*) from GreaterManchesterCrime where CrimeID not in (select t1.crimeID from GreaterManchesterCrime as t1 join crime as t2 on t1.crimeID = t2.crimeID where t2.outcome = \"Under investigation\")", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: 'crime'"}, {"query": "SELECT Outcome FROM GreaterManchesterCrime WHERE CrimeID = \"6B:E2:54:C6:58:D2\"", "prediction": "select t1.outcome from GreaterManchesterCrime as t1 join case as t2 on t1.case = t2.case where t2.outcome = \"6B:E2:54:C6:58:D2\"", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: 'case'"}, {"query": "SELECT * FROM Fires WHERE State = \"TX\" AND STAT_CAUSE_DESCR LIKE \"Campfire\"", "prediction": "select distinct t1.FIRE_SIZE_CLASS from Fires as t1 join States as t2 on t1.State = t2.State where t1.FIRE_SIZE_CLASS = \"COMPUTER LITERACY\"", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'states'"}, {"query": "SELECT OWNER_DESCR FROM FIres WHERE State = \"OR\" AND FIRE_YEAR = 2015 ORDER BY FIRE_SIZE DESC LIMIT 1", "prediction": "select t1.OWNER_CODE from USWildFires as t1 join Fires as t2 on t1.FIRE_YEAR = t2.FIRE_YEAR where t2.FIRE_YEAR = 2015 order by t2.FIRE_SIZE desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'uswildfires'"}, {"query": "SELECT COUNTY FROM Fires WHERE State = \"WA\" AND FIRE_YEAR = 2012", "prediction": "select t1.COUNTY from the county as t1 join Fires as t2 on t1.COUNTY = t2.COUNTY where t2.FIRE_YEAR = 2012", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'the'"}, {"query": "SELECT count(DISTINCT FIRE_YEAR) FROM Fires", "prediction": "select count(*) from database", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'database'"}, {"query": "SELECT STAT_CAUSE_CODE FROM Fires GROUP BY STAT_CAUSE_CODE ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.FIRE_CAUSE_CODE from Fires as t1 join the database as t2 on t1.FIRE_YEAR = t2.FIRE_YEAR group by t1.FIRE_CAUSE_CODE order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'the'"}, {"query": "SELECT FIRE_YEAR FROM Fires ORDER BY FIRE_SIZE DESC LIMIT 1", "prediction": "select t1.FIRE_YEAR from Fires as t1 join the area as t2 on t1.COMPUTER_DATE = t2.COMPUTER_DATE where t2.COUNTY = (select max(COUNTY) from Fires)", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'the'"}, {"query": "SELECT count(*) FROM Fires WHERE OWNER_DESCR = \"MISSING/NOT SPECIFIED\"", "prediction": "select count(*) from properties where OWNER_CODE not in (select OWNER_CODE from Fires)", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'properties'"}, {"query": "SELECT COUNTY FROM Fires GROUP BY COUNTY ORDER BY count(*)", "prediction": "select t1.COUNTY from Fires as t1 join the database as t2 on t1.FIRE_YEAR = t2.FIRE_YEAR where t1.FIRE_YEAR = 2000 group by t1.COUNTY order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'the'"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE State = \"NY\" and FIRE_YEAR = \"2006\"", "prediction": "select sum(t1.acreage) from fires as t1 join States as t2 on t1.state = t2.state where t1.fault_year = 2006 and t2.state = \"NC\"", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'states'"}, {"query": "SELECT * FROM Fires WHERE State = \"UT\" AND FIRE_YEAR = 1997 ORDER BY FIRE_SIZE DESC LIMIT 1", "prediction": "select t1.FIRE_YEAR from Fires as t1 join the National Park Service as t2 on t1.FIRE_YEAR = t2.FIRE_YEAR where t1.FIRE_YEAR = 1997 order by t1.FIRE_SIZE desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'the'"}, {"query": "SELECT count(*) FROM Fires WHERE COUNTY = \"Gloucester\" AND FIRE_SIZE > 10", "prediction": "select count(*) from wildfires where COUNTY = \"Georgia\" and FIRE_SIZE > 10", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'wildfires'"}, {"query": "SELECT STAT_CAUSE_DESCR FROM Fires GROUP BY STAT_CAUSE_DESCR ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.FIRE_YEAR from Fires as t1 join the National Fire Protection Association (NFPA) as t2 on t1.FIRE_YEAR = t2.FIRE_YEAR group by t1.FIRE_YEAR order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'the'"}, {"query": "SELECT OWNER_DESCR FROM Fires GROUP BY OWNER_DESCR ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.Public, t1.Public, t1.FIRE_SIZE_CLASS from Fires as t1 join States as t2 on t1.Public, t1.FIRE_SIZE_CLASS = t2.FIRE_SIZE_CLASS group by t1.Public, t1.FIRE_SIZE_CLASS order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'states'"}, {"query": "SELECT count(*) FROM Fires WHERE STAT_CAUSE_DESCR LIKE \"%Campfire%\" AND FIRE_YEAR = 2014", "prediction": "select count(*) from Campfires where DISCOVERY_DATE > '2014-04-19 15:06:20' and OWNER_DESCR <= '2014-03-15 00:33:18'", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'campfires'"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE State = \"TX\" AND FIRE_YEAR BETWEEN 2000 AND 2010", "prediction": "select sum(t1.acreage) from properties as t1 join events as t2 on t1.property = t2.property where t2.FIRE_YEAR >= 2000 and t2.FIRE_SIZE <= 2010", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'properties'"}, {"query": "SELECT STAT_CAUSE_DESCR FROM Fires GROUP BY STAT_CAUSE_DESCR ORDER BY count(*) DESC LIMIT 1", "prediction": "select CONT_CAUSE_CODE from Fires group by CONT_CAUSE_CODE order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: cont_cause_code"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE STATE = \"TX\" AND FIRE_YEAR BETWEEN 2000 AND 2010  UNION SELECT sum(FIRE_SIZE) FROM Fires WHERE STATE = \"TX\" AND FIRE_YEAR BETWEEN 1990 AND 2000", "prediction": "select count(*) from fires where TYROCODE = \"2000\" and TYROCODE = \"1990\"", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: tyrocode"}, {"query": "SELECT LATITUDE FROM Fires GROUP BY LATITUDE ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.LATITUDE from Fires as t1 join the National Park Service as t2 on t1.FIRE_YEAR = t2.FIRE_YEAR where t1.STATE = \"USA\" group by t1.LATITUDE order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'the'"}]