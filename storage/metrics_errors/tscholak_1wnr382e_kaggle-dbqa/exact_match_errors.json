[{"query": "SELECT AwayTeam FROM football_data WHERE HomeTeam = \"Omiya Ardija\" AND Season LIKE \"%2018%\"", "prediction": "select AwayTeam from football_data where homeTeam = 'Omiya Ardija' and year = 2018", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT count(*) FROM football_data WHERE PSH != \"\" AND PSD != \"\" AND PSA != \"\"", "prediction": "select count(*) from betfront where homeTeam = \"Pinnacle\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: hometeam"}, {"query": "SELECT count(*) FROM football_data WHERE B365H > PSH", "prediction": "select count(*) from betfront where home_oPENING > (select HOME_OPENING from betfront where league = \"Pinnacle\")", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: league"}, {"query": "SELECT count(*) FROM football_data WHERE FTHG = 0 AND FTAG = 0", "prediction": "select count(*) from football_data where 0-0 = 0", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: 0-0"}, {"query": "SELECT B365D FROM football_data WHERE HomeTeam = \"Swindon\" and AwayTeam = \"Millwall\" and Season = \"2016/2017\"", "prediction": "select t2.DRAW_CLOSING from football_data as t1 join betfront as t2 on t1.b365H = t2.bet365H where t1.season = 2016/2017 and t1.team = 'Swindon' vs. 'Millwall'", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'betfront.bet365h'"}, {"query": "SELECT T2.state, sum(c14),sum(c25) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY T3.average_scale_score DESC LIMIT 10", "prediction": "select t1.state_code, t2.t_fed_rev from NDECoreExcel_Math_Grade8 as t1 join FINREV_FED_17 as t2 on t1.state_code = t2.state_code group by t1.state_code order by avg(t1.avg(avg(avg(avg(avg(avg(t2.centre_code) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, max(T1.c14), T3.average_scale_score FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state UNION SELECT T1.school_district, max(T1.c25), T3.average_scale_score FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district, avg(t2.average_scale_score) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.school_district order by t1.c14 desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT state FROM NDECoreExcel_Math_Grade8 ORDER BY average_scale_score DESC LIMIT 1", "prediction": "select t1.state_code from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.state_code order by avg(t2.average_scale_score) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, max(T1.t_fed_rev / T3.average_scale_score) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 on T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district, avg(t2.average_scale_score) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.school_district order by sum(t1.t_fed_rev), avg(t2.average_scale_score) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T2.state, T3.average_scale_score FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY sum(T1.t_fed_rev) DESC LIMIT 1", "prediction": "select state_code, avg(t2.average_scale_score) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.state_code order by sum(t1.t1.t1.t1.fed_rev) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, min(T1.t_fed_rev / T3.average_scale_score) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 on T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select school_district, avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(avg(av) from", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Default tables should not be None or empty"}, {"query": "SELECT T2.state, T3.average_scale_score FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY sum(T1.t_fed_rev) LIMIT 1", "prediction": "select state_code, avg(t2.average_scale_score) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.state_code order by sum(t1.t1.t1.fed_rev) limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT state FROM NDECoreExcel_Math_Grade8 ORDER BY average_scale_score DESC LIMIT 1", "prediction": "select t1.state_code from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.state_code order by avg(t2.average_scale_score) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"California\"", "prediction": "select avg(average_scale_score) from NDECoreExcel_Math_Grade8 where state_code = \"CA\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state_code"}, {"query": "SELECT sum(T1.c14), sum(T1.c25) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Colorado\"", "prediction": "select sum(t1.state_code), t2.t1.child_nutrition from FINREV_FED_17 as t1 join school_district as t2 on t1.state_code = t2.state_code where t1.title_1 = \"Colorado\" and t2.t1.child_nutrition = \"Kids\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'school_district'"}, {"query": "SELECT t_fed_rev FROM FINREV_FED_17 WHERE school_district LIKE \"%Pecatonia Area%\"", "prediction": "select sum(t1.fed_rev) from FINREV_FED_17 as t1 join school_district as t2 on t1.school_district = t2.school_district where t2.school_district = \"Pecatonia Area School District\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'school_district'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"North Carolina\" UNION SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"South Carolina\"", "prediction": "select avg(t2.average_scale_score) from NDECoreExcel_Math_Grade8 as t1 join students as t2 on t1.all_students = t2.all_students where t1.state_code = \"North Carolina\" intersect select t2.score from NDECoreExcel_Math_Grade8 as t1 join students as t2 on t1.state_code = t2.state_code where t1.state_code = \"South Carolina\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'students'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"North Carolina\" UNION SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"New York\"", "prediction": "select avg(average_scale_score) from NDECoreExcel_Math_Grade8 where state_code = \"NC\" intersect select avg(average_scale_score) from NDECoreExcel_Math_Grade8 where state_code = \"NY\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state_code"}, {"query": "SELECT count(*) FROM FINREV_FED_17 WHERE c25 > c14", "prediction": "select count(*) from FINREV_FED_17 where revenue via Child Nutrition A > revenue via child left school behind act", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: revenue"}, {"query": "SELECT T1.growst, avg(T2.concen) FROM sampledata15 as T1 JOIN resultsdata15 as T2 ON T1.sample_pk = T2.sample_pk GROUP BY T1.growst", "prediction": "select avg(t1.pesticide), t1.state from sampledata15 as t1 join resultsdata15 as t2 on t1.sample_pk = t2.sample_pk where t1.country = 'United States' and t2.food = 'Sample' group by t1.state", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sampledata15.pesticide'"}, {"query": "SELECT commod FROM resultsdata15 WHERE concen > lod", "prediction": "select t1.commod from sampledata15 as t1 join resultsdata15 as t2 on t1.commod = t2.commod where t1.concentration > (select min(concentration) from resultsdata15)", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sampledata15.concentration'"}, {"query": "SELECT T1.country FROM sampledata15 as T1 JOIN resultsdata15 as T2 ON T1.sample_pk = T2.sample_pk GROUP BY T1.country ORDER BY sum(T2.concen) LIMIT 1", "prediction": "select country from sampledata15 order by pesticide limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: pesticide"}, {"query": "SELECT max(concen) FROM resultsdata15", "prediction": "select max(t1.pesticide) from pesticide as t1 join resultsdata15 as t2 on t1.pestcode = t2.pestcode group by t1.pestcode", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'pesticide'"}, {"query": "SELECT site FROM sampledata15 WHERE sample_pk = 3763", "prediction": "select 4 digit pestcode from resultsdata15 where sample_pk = 3763", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: 4"}, {"query": "SELECT country FROM sampledata15 WHERE sample_pk = 6480 AND origin = 2", "prediction": "select origin from sampledata15 where sample_pk = 6480 import from sampledata15 where origin = 'Australia'", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: import"}, {"query": "SELECT confmethod FROM resultsdata15 as T2 JOIN sampledata15 as T1 ON T1.sample_pk = T2.sample_pk ORDER BY year, month, day DESC LIMIT 1", "prediction": "select pestcode from resultsdata15 order by year desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT votedby FROM hall_of_fame WHERE yearid = \"2000\" GROUP BY votedby ORDER BY count(*) DESC LIMIT 1", "prediction": "select t2.votedby from hall_of_fame as t1 join player_award as t2 on t1.player_id = t2.player_id where t1.year = 2000 group by t2.votedby order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player_award.votedby'"}, {"query": "SELECT T2.salary FROM salary as T2 JOIN hall_of_fame as T1 ON T1.player_id = T2.player_id WHERE T1.inducted = \"Y\"", "prediction": "select t1.salary from salary as t1 join player as t2 on t1.player_id = t2.player_id join hall_of_fame as t3 on t1.hall_of_fame = t3.hall_of_fame_id", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'salary.hall_of_fame'"}, {"query": "SELECT min(votes), yearid FROM hall_of_fame WHERE inducted = \"Y\" AND yearid >= 1871 GROUP BY yearid", "prediction": "select min(t1.votes), t1.year from hall_of_fame as t1 join player as t2 on t1.player_id = t2.player_id where t1.year > 1871 group by t1.year", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'hall_of_fame.year'"}, {"query": "SELECT T1.birth_country FROM hall_of_fame as T2 JOIN player as T1 ON T1.player_id = T2.player_id WHERE T2.inducted = \"Y\" AND T2.yearid >= 1871", "prediction": "select t1.birth_country from player as t1 join hall_of_fame as t2 on t1.birth_year = t2.yearid where t2.year = 1871", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'hall_of_fame.year'"}, {"query": "SELECT DISTINCT yearid FROM hall_of_fame WHERE needed_note != \"\"", "prediction": "select distinct year from hall_of_fame where votes!= \"Special\"", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT T1.player_id, T1.award_id , min(T1.year - T2.birth_year) FROM player_award as T1 JOIN player as T2 ON T1.player_id = T2.player_id GROUP BY T1.award_id", "prediction": "select t2.name_first, t2.name_last, t1.award_id, t1.birth_year from player as t1 join player_award as t2 on t1.player_id = t2.player_id order by t1.birth_year desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player_award.name_first'"}, {"query": "SELECT T1.player_id, T1.award_id , max(T1.year - T2.birth_year) FROM player_award as T1 JOIN player as T2 ON T1.player_id = T2.player_id GROUP BY T1.award_id", "prediction": "select t1.year, t2.player_id from player as t1 join player_award as t2 on t1.player_id = t2.player_id order by t1.birth_year desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.year'"}, {"query": "SELECT T2.team_id FROM hall_of_fame as T1 JOIN salary as T2 ON T1.player_id = T2.player_id AND T1.yearid = T2.year WHERE T1.inducted = \"Y\" GROUP BY T2.team_id ORDER BY count(*) DESC LIMIT 10", "prediction": "select t2.name_first, t2.name_last from player as t1 join team as t2 on t1.team_id = t2.team_id join hall_of_fame as t3 on t2.player_id = t3.player_id group by t2.team_id order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'team'"}, {"query": "SELECT avg(T1.death_year - T1.birth_year) FROM player as T1 JOIN hall_of_fame as T2 ON T1.player_id = T2.player_id WHERE T2.inducted = \"Y\"", "prediction": "select avg(t1.lifespan) from player as t1 join hall_of_fame as t2 on t1.player_id = t2.player_id", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.lifespan'"}, {"query": "SELECT avg(T1.weight) FROM player as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id GROUP BY notes", "prediction": "select avg(weight), position from player_award group by name_first, name_last", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: weight"}, {"query": "SELECT T2.notes FROM hall_of_fame as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id WHERE T1.inducted = \"Y\" GROUP BY notes ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.position from player_award as t1 join player_award as t2 on t1.player_id = t2.player_id join hall_of_fame as t3 on t2.hall_of_fame.yearid = t3.yearid group by t1.position order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: too many values to unpack (expected 2)"}, {"query": "SELECT player_id FROM player_award_vote WHERE year = \"1971\" ORDER BY points_won DESC LIMIT 1", "prediction": "select t1.name_first, t1.name_last from player as t1 join player_award as t2 on t1.player_id = t2.player_id where t1.birth_year = 1971 order by t1.points_max desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.points_max'"}, {"query": "SELECT DISTINCT notes FROM player_award WHERE player_id = \"willite01\"", "prediction": "select defense from player where player_id = (select player_id from player_awards where year = '2003-04-19 15:06:20')", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: defense"}, {"query": "SELECT avg(T1.weight) FROM player as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id WHERE T2.award_id = \"TSN All-Star\" AND notes = \"3B\"", "prediction": "select avg(t1.weight) from player as t1 join player_award as t2 on t1.player_id = t2.player_id where t2.award_id = 'TSN all-star' and t2.name_first = 'T3.baseman'", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player_award.name_first'"}, {"query": "SELECT Name FROM nuclear_power_plants ORDER BY Capacity DESC LIMIT 1", "prediction": "select t1.name from nuclear_power_plants as t1 join t2.id as t2 on t1.id = t2.id order by t1.capacity desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: 't2.id'"}, {"query": "SELECT Longitude, Latitude FROM nuclear_power_plants WHERE ReactorType = \"BWR\" ORDER BY ConstructionStartAt LIMIT 1", "prediction": "select t1.location from nuclear_power_plants as t1 join construction as t2 on t1.id = t2.constructionstartAt where t1.reactortype = \"BWR\" order by t2.constructionstartAt limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: 'construction'"}, {"query": "SELECT groupName, groupYear FROM torrents", "prediction": "select t2.releaseYear, t1.tag from tags as t1 join torrents as t2 on t1.id = t2.groupId", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'torrents.releaseyear'"}, {"query": "SELECT DISTINCT groupName FROM torrents WHERE totalSnatched > 100 AND releaseType = \"album\"", "prediction": "select album from torrents group by album having count(*) > 100", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: album"}, {"query": "SELECT T2.groupName FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id WHERE T1.tag = \"houston\" ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select t2.releaseType from tags as t1 join torrents as t2 on t1.id = t2.groupId where t1.city = 'houston' groupName = 'Houston' groupName = 'T2.groupName' groupYear = 2013", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'tags.city'"}, {"query": "SELECT groupName FROM torrents WHERE artist = \"lasean camry\" AND totalSnatched = (SELECT max(totalSnatched) FROM torrents WHERE artist = \"lasean camry\") UNION SELECT groupName FROM torrents WHERE artist = \"lasean camry\" AND totalSnatched = (SELECT min(totalSnatched) FROM torrents WHERE artist = \"lasean camry\")", "prediction": "select t2.releaseType, t3.releaseType from torrents as t1 join tags as t2 on t1.groupId = t2.groupId join songs as t3 on t2.tag = t3.id where t3.releaseType = \"lasean camry\" groupName = \"Lassean\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'tags.groupid'"}, {"query": "SELECT groupName FROM torrents WHERE releaseType = \"album\" ORDER BY totalSnatched DESC LIMIT 10", "prediction": "select album from albums order by popularity", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'albums'"}, {"query": "SELECT T1.tag FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id WHERE T2.groupYear >= 2010 GROUP BY T1.tag ORDER BY T2.totalSnatched DESC LIMIT 10", "prediction": "select t2.tag from tags as t1 join torrents as t2 on t1.id = t2.groupId where t2.groupYear = 2010 group by t1.tag order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'torrents.tag'"}, {"query": "SELECT artist FROM torrents WHERE groupYear = 2015 GROUP BY artist ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select groupName, artist from torrents where groupYear = 2015 groupName = (select groupName from torrents where groupYear = 2015)", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "unhashable type: 'dict'"}, {"query": "SELECT T1.tag, T2.groupName FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id", "prediction": "select t2.tag from releases as t1 join tags as t2 on t1.id = t2.index where t1.releaseType = \"Release\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'releases'"}, {"query": "SELECT artist FROM torrents GROUP BY artist ORDER BY avg(totalSnatched) DESC LIMIT 1", "prediction": "select artist/group from torrents group by artist order by avg(totalSnatched) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: artist/group"}, {"query": "SELECT groupName FROM torrents ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select t1.cd from whatCDHipHop as t1 join torrents as t2 on t1.id = t2.groupId group by t2.groupId order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'whatcdhiphop'"}, {"query": "SELECT artist FROM torrents GROUP BY artist ORDER BY sum(totalSnatched) DESC LIMIT 1", "prediction": "select t2.artist from tags as t1 join CDs as t2 on t1.id = t2.groupId group by t2.artist order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'cds'"}, {"query": "SELECT sum(totalSnatched) FROM torrents WHERE releaseType = \"ep\"  UNION SELECT sum(totalSnatched) FROM torrents WHERE releaseType = \"album\"", "prediction": "select t1.ep, t1.album, count(*) from torrents as t1 join artists as t2 on t1.artist = t2.artist where t1.releaseType = \"Electric\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'artists'"}, {"query": "SELECT artist FROM torrents GROUP BY artist HAVING count(*) = 1", "prediction": "select artist/groupName from torrents group by artist having count(*) = 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: artist/groupname"}, {"query": "SELECT artist FROM torrents WHERE groupYear > 2010 GROUP BY artist", "prediction": "select artist from torrents where releaseYear > 2010", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: releaseyear"}, {"query": "SELECT CrimeTS FROM GreaterManchesterCrime GROUP BY CrimeTS ORDER BY count(*) DESC LIMIT 1", "prediction": "select Time from GreaterManchesterCrime group by Time order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: time"}, {"query": "SELECT Outcome FROM GreaterManchesterCrime WHERE Location LIKE \"%Street%\" GROUP BY Outcome ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.outcome from GreaterManchesterCrime as t1 join CrimeID as t2 on t1.crimeID = t2.crimeID where t2.location = \"street\"", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: 'crimeid'"}, {"query": "SELECT Type FROM GreaterManchesterCrime WHERE Outcome LIKE \"%Investigation complete%\" GROUP BY Type ORDER BY count(*) DESC LIMIT 1", "prediction": "select Type from GreaterManchesterCrime where Outcome = \"Investigation complete\" group by Type order by avg(investigation complete) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: investigation"}, {"query": "SELECT Location FROM GreaterManchesterCrime GROUP BY Location ORDER BY count(*) DESC LIMIT 1", "prediction": "select Location from GreaterManchesterCrime order by priority desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: priority"}, {"query": "SELECT Outcome FROM GreaterManchesterCrime WHERE CrimeID = \"6B:E2:54:C6:58:D2\"", "prediction": "select t1.outcome from GreaterManchesterCrime as t1 join CrimeID as t2 on t1.crimeID = t2.crimeID where t2.case = 6B:E2:54:C6:58:D2", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: 'crimeid'"}, {"query": "SELECT OWNER_DESCR FROM FIres WHERE State = \"OR\" AND FIRE_YEAR = 2015 ORDER BY FIRE_SIZE DESC LIMIT 1", "prediction": "select t1.OWNER_CODE from USWildFires as t1 join Fires as t2 on t1.FIRE_YEAR = t2.FIRE_YEAR where t2.COUNTY = \"Oregon\" and t1.FIRE_SIZE_CLASS = \"MAJOR\" and t1.OWNER_CODE = t2.OWNER_CODE where t1.FIRE_YEAR = \"2015\"", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'uswildfires'"}, {"query": "SELECT COUNTY FROM Fires WHERE State = \"WA\" AND FIRE_YEAR = 2012", "prediction": "select t1.COUNTY from Washington as t1 join Fires as t2 on t1.FIPS_CODE = t2.FIPS_CODE where t2.FIRE_YEAR = 2012", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'washington'"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE State = \"NY\" and FIRE_YEAR = \"2006\"", "prediction": "select sum(t1.FIRE_SIZE) from Fires as t1 join STATE as t2 on t1.STATE = t2.STATE where t2.STATE = \"NC\" and t1.CONT_DATE = 2006", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'state'"}, {"query": "SELECT OWNER_DESCR FROM Fires GROUP BY OWNER_DESCR ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.public_land, t1.private_land from USWildFires as t1 join Fires as t2 on t1.fire_year = t2.FIRE_YEAR group by t1.public_land order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'uswildfires'"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE State = \"TX\" AND FIRE_YEAR BETWEEN 2000 AND 2010", "prediction": "select sum(t1.fIRE_SIZE_CLASS) from fires as t1 join COUNTY as t2 on t1.COUNTY = t2.COUNTY where t1.fIRE_YEAR between 2000 and 2010;", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'county'"}]