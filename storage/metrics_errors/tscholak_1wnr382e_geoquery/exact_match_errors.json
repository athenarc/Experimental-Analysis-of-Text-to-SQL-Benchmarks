[{"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name join city as t3 on t1.state_name = t3.state_name order by t3.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"new mexico\" ;", "prediction": "select count(*) from city as t1 join border_info as t2 on t1.city_name = t2.border_info where t1.country_name = \"new mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.border_info'"}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 AND LAKEalias0.STATE_NAME = \"michigan\" ;", "prediction": "select major lake_name from lake where state_name = \"Michigan\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t3.river_name = t2.river_name where t3.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t3.river_name = t2.river_name where t3.river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"delaware\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"Delaware\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"ohio\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"Ohio\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"chattahoochee\" ;", "prediction": "select position from river where river_name = \"chattahoochee\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: position"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"potomac\" ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t3.river_name = t2.river_name where t3.country_name = \"Potomac\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"missouri\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select distinct t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select distinct state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select state_name from state where border = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"ohio\" ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"Ohio\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"new york\" ) AND RIVERalias0.TRAVERSE = \"new york\" ;", "prediction": "select length from river where state_name = \"new york\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"florida\" ) AND RIVERalias0.TRAVERSE = \"florida\" ;", "prediction": "select longest river_name from river where state_name = \"FL\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: longest"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"new york\" ) AND RIVERalias0.TRAVERSE = \"new york\" ;", "prediction": "select longest river_name from river where state_name = \"new york\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: longest"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"mississippi\" ) AND RIVERalias0.TRAVERSE = \"mississippi\" ;", "prediction": "select length from river where state_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"colorado\" ) AND RIVERalias0.TRAVERSE = \"colorado\" ;", "prediction": "select length from river where state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"california\" ) AND RIVERalias0.TRAVERSE = \"california\" ;", "prediction": "select longest river_name from river where state_name = \"California\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: longest"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"pennsylvania\" ) AND RIVERalias0.TRAVERSE = \"pennsylvania\" ;", "prediction": "select longest river_name from river where country_name = \"Pennsylvania\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: longest"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select longest river_name from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: longest"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"iowa\" ;", "prediction": "select count(*) from river where state_name = \"Iowa\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select count(*) from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select count(*) from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ;", "prediction": "select state_name from state where border_info = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border_info"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"california\" ;", "prediction": "select state_name from state where state_name = \"California\" adjacent state_name = \"New Mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: adjacent"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"kansas\" ;", "prediction": "select river_name from river where state_name = \"Kansas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"alaska\" ;", "prediction": "select t1.river_name from river as t1 join border_info as t2 on t1.country_name = t2.country_name where t2.state_name = \"Alaska\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.country_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select river_name from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"virginia\" ;", "prediction": "select river_name from river where state_name = \"Virginia\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = \"illinois\" ;", "prediction": "select river_name from river where state_name = \"Illinois\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 ;", "prediction": "select count(distinct state_name) from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"miami\" ;", "prediction": "select state_name from state where city = \"Miami\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"boston\" ;", "prediction": "select state_name from state where city_name = \"Boston\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: city_name"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"boulder\" ;", "prediction": "select count(*) from city as t1 join state as t2 on t1.city_name = t2.state_name join highlow as t3 on t2.mountain_name = t3.mountain_name where t3.state_name = \"Boulder\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.mountain_name'"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"boulder\" ;", "prediction": "select population from boulder", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'boulder'"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"boulder\" ;", "prediction": "select count(*) from boulder as t1 join city as t2 on t1.city_name = t2.city_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'boulder'"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.CITY_NAME = \"riverside\" ;", "prediction": "select count(*) from city as t1 join state as t2 on t1.city_name = t2.state_name join river as t3 on t2.river_name = t3.river_name", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.river_name = (select river_name from river where country_name = 'United States')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION > ( SELECT HIGHLOWalias1.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = \"colorado\" ) ;", "prediction": "select highlow from highlow where highest_point > (select max(highest_point) from highlow where state_name = \"Colorado\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highlow"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"new mexico\" ;", "prediction": "select max(t2.highest_elevation) from city as t1 join highlow as t2 on t1.city_name = t2.country_name where t1.state_name = \"New mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.country_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(t2.highest_point) from mountain as t1 join highlow as t2 on t1.mountain_name = t2.mountain_name where t1.country_name = \"Montana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.mountain_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(t2.highest_point) from mountain as t1 join highlow as t2 on t1.mountain_name = t2.mountain_name where t1.country_name = \"Montana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.mountain_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select longest river_name from river where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: longest"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH IN ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias0 ) FROM ( SELECT MAX( RIVERalias1.LENGTH ) AS DERIVED_FIELDalias0 , RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias2.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias2 GROUP BY BORDER_INFOalias2.BORDER ) AS DERIVED_TABLEalias0 ) ) ) GROUP BY RIVERalias1.TRAVERSE ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select t2.length from state as t1 join river as t2 on t1.country_name = t2.country_name join border_info as t3 on t2.border = t3.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(t2.highest_point) from mountain as t1 join highlow as t2 on t1.mountain_name = t2.mountain_name where t1.country_name = \"Montana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.mountain_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"montana\" ;", "prediction": "select max(t2.highest_point) from mountain as t1 join highlow as t2 on t1.mountain_name = t2.mountain_name where t1.country_name = \"Montana\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.mountain_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"wyoming\" ;", "prediction": "select high_point from city as t1 join highlow as t2 on t1.city_name = t2.city_name where t1.state_name = \"Wyoming\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.city_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"rhode island\" ;", "prediction": "select max(t2.highest_point) from city as t1 join highlow as t2 on t1.city_name = t2.country_name where t1.country_name = \"rhode island\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.country_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME = \"new mexico\" ;", "prediction": "select max(t2.highest_point) from state as t1 join highlow as t2 on t1.country_name = t2.country_name where t1.state_name = \"New Mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.country_name'"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DERIVED_TABLEalias1.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT COUNT( HIGHLOWalias0.STATE_NAME ) FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION < ( SELECT HIGHLOWalias1.LOWEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = \"alabama\" ) ;", "prediction": "select count(*) from state where lowest_elevation < (select max(lowest_elevation) from highlow)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: lowest_elevation"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = \"san francisco\" ;", "prediction": "select max(elevation) from city as t1 join highlow as t2 on t1.city_name = t2.city_name where t1.city_name = \"san francisco\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.city_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_POINT = \"guadalupe peak\" ;", "prediction": "select max(t1.elevation) from mountain as t1 join highlow as t2 on t1.mountain_name = t2.mountain_name where t1.mountain_name = \"Guadalupe peak\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.mountain_name'"}, {"query": "SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "prediction": "select max(highest_point) from highlow where country_name = 'America'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "prediction": "select max(highest_elevation) from highlow where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT MAX( HIGHLOWalias0.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias0 ;", "prediction": "select max(highest_point) from highlow where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"california\" ) AND RIVERalias0.TRAVERSE = \"california\" ;", "prediction": "select length from river where state_name = \"California\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select length from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select count(*) from river where state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ;", "prediction": "select count(*) from river where state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select count(*) from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( RIVERalias0.RIVER_NAME ) AS DERIVED_FIELDalias0 , RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ) AS DERIVED_TABLEalias0 ;", "prediction": "select count(*) from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT COUNT( STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 ;", "prediction": "select count(distinct state_name) from border_info where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT COUNT( DISTINCT STATEalias0.STATE_NAME ) FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ) ;", "prediction": "select count(*) from state where state_name not in (select state_name from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT COUNT( HIGHLOWalias0.STATE_NAME ) FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION > ( SELECT HIGHLOWalias1.HIGHEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME = ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = ( SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ) ) ) ;", "prediction": "select count(*) from state where highest_point > (select max(highest_point) from state where capital = (select state_name from state where country_name = 'United States')", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: highest_point"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"florida\" ;", "prediction": "select major river_name from river as t1 join state as t2 on t1.country_name = t2.country_name where t2.state_name = \"FL\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"ohio\" ;", "prediction": "select major river_name from river as t1 join state as t2 on t1.country_name = t2.country_name where t2.state_name = \"Ohio\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select major river_name from river where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"illinois\" ;", "prediction": "select major river_name from river where state_name = \"ILINOSI\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = 'Texas' order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.city_name from city as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.border = t3.state_name where t3.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"alabama\" ;", "prediction": "select major city_name from city as t1 join state as t2 on t1.state_name = t2.state_name where t2.state_name = \"Alabama\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"alaska\" ;", "prediction": "select major city_name from city where state_name = \"Alaska\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"new york\" ;", "prediction": "select major city_name from city where state_name = \"new york\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"vermont\" ;", "prediction": "select major city_name from city where state_name = \"Vermont\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"pennsylvania\" ;", "prediction": "select major city_name from city where state_name = \"Pennsylvania\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"texas\" ;", "prediction": "select major city_name from city where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"oklahoma\" ;", "prediction": "select major city_name from city where state_name = \"Oklahoma\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"colorado\" ;", "prediction": "select major city_name from city where state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"new mexico\" ;", "prediction": "select major city_name from city where country_name = \"New mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"illinois\" ;", "prediction": "select major city_name from city where state_name = \"IL\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"ohio\" ;", "prediction": "select major city_name from city where state_name = \"Ohio\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"texas\" ;", "prediction": "select major city_name from city where state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"wyoming\" ;", "prediction": "select major city_name from city where state_name = \"Wyoming\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"california\" ;", "prediction": "select major city_name from city where state_name = \"California\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"delaware\" ;", "prediction": "select major city_name from city where state_name = \"Delaware\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"rhode island\" ;", "prediction": "select major city_name from city where country_name = \"rhode island\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"missouri\" ;", "prediction": "select major city_name from city where state_name = \"Missouri\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"kansas\" ;", "prediction": "select major city_name from city where state_name = \"Kansas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.city_name from city as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.border = t3.state_name where t3.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 ;", "prediction": "select major city_name from city where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 ;", "prediction": "select major city_name from city as t1 join state as t2 on t1.country_name = t2.country_name where t2.state_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 ;", "prediction": "select major city_name from city where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.population from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"texas\" ;", "prediction": "select major population from city as t1 join state as t2 on t1.state_name = t2.state_name where t2.state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT CITYalias0.POPULATION FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME = \"wisconsin\" ;", "prediction": "select major population from city as t1 join state as t2 on t1.state_name = t2.state_name where t2.state_name = \"Wisconsin\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT STATEalias0.CAPITAL FROM HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND STATEalias0.STATE_NAME = HIGHLOWalias0.STATE_NAME ;", "prediction": "select capital from state order by lowest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: lowest_point"}, {"query": "SELECT DISTINCT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 , RIVER AS RIVERalias0 WHERE CITYalias0.POPULATION = ( SELECT MAX( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 , RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = CITYalias1.STATE_NAME ) AND RIVERalias0.TRAVERSE = CITYalias0.STATE_NAME ;", "prediction": "select t1.city_name from city as t1 join state as t2 on t1.country_name = t2.country_name join river as t3 on t2.river = t3.river_name where t1.country_name = 'American' group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river'"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select t1.capital from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select max(highest_point) from highlow where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select max(highest_point) from highlow where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT HIGHLOWalias0.HIGHEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select max(highest_point) from highlow where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) AND STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) ) ORDER BY CITYalias0.POPULATION DESC LIMIT 1 ;", "prediction": "select t1.city_name from city as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.river = t3.river_name where t3.state_name = \"mississippi\" order by t1.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ;", "prediction": "select state_name from border_info where border = \"Texas\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "prediction": "select state_name from border_info where border = \"Texas\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from border_info where border = \"Texas\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ;", "prediction": "select state_name from state where border = \"Texas\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "prediction": "select state_name from state where border = \"Texas\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from state where border = \"Texas\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"california\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"california\" ) ;", "prediction": "select state_name from border_info where state_name = \"California\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"california\" ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "prediction": "select state_name from border_info where state_name = \"California\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"california\" AND STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"california\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from border_info where state_name = \"California\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.length from river as t1 join state as t2 on t1.country_name = t2.country_name group by t1.country_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t2.length from state as t1 join river as t2 on t1.country_name = t2.country_name group by t2.country_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.length from river as t1 join state as t2 on t1.country_name = t2.country_name group by t1.country_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT DISTINCT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = ( SELECT RIVER_NAME FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias0 , RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 GROUP BY RIVERalias1.RIVER_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 , RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 GROUP BY RIVERalias2.RIVER_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.length from river as t1 join state as t2 on t1.country_name = t2.country_name group by t1.country_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"tennessee\" ) ) AND RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"tennessee\" ) ;", "prediction": "select t2.length from state as t1 join river as t2 on t1.state_name = t2.country_name where t1.border = 'Tennessee'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.border'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , RIVER AS RIVERalias0 WHERE BORDER_INFOalias0.BORDER = \"tennessee\" AND RIVERalias0.TRAVERSE = BORDER_INFOalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select t2.length from state as t1 join river as t2 on t1.state_name = t2.country_name where t1.border = 'Tennessee'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.border'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE = ( SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( CITYalias0.CITY_NAME ) DESC LIMIT 1 ) ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select t2.length from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select min(lowest_point) from highlow where country_name = \"USA\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select lowest_point from highlow where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select min(lowest_point) from highlow where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: country_name"}, {"query": "SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ) ORDER BY HIGHLOWalias0.LOWEST_ELEVATION LIMIT 1 ;", "prediction": "select t1.lowest_point from highlow as t1 join state as t2 on t1.state_name = t2.state_name join river as t3 on t3.river_name = t2.river_name where t3.state_name = \"Colorado\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.river_name'"}, {"query": "SELECT HIGHLOWalias0.LOWEST_POINT FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ORDER BY HIGHLOWalias0.LOWEST_ELEVATION LIMIT 1 ;", "prediction": "select min(lowest_point) from highlow where river = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select state_name from state where river = \"mississippi\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "prediction": "select state_name from state where river = \"mississippi\" order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias1.TRAVERSE FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select state_name from state where river ='mississippi' order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "prediction": "select state_name from state where river ='mississippi' order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river"}, {"query": "SELECT STATEalias0.POPULATION FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t1.population from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT BORDER_INFOalias0.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias0.BORDER ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.STATE_NAME , COUNT( DISTINCT BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"texas\" ) ;", "prediction": "select state_name from state where border = \"Texas\" order by area asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT SUM( DERIVED_TABLEalias0.LENGTH ) FROM ( SELECT DISTINCT RIVERalias0.RIVER_NAME , RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 ) AS DERIVED_TABLEalias0 ;", "prediction": "select sum(length) from river where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'as'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"texas\" ) ;", "prediction": "select t1.river_name from river as t1 join state as t2 on t1.country_name = t2.state_name join border_info as t3 on t2.border = t3.state_name where t3.state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.border'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"new mexico\" ) ;", "prediction": "select t2.river_name from border_info as t1 join river as t2 on t1.state_name = t2.state_name where t1.border = \"new mexico\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"alabama\" ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.country_name join border_info as t3 on t3.state_name = t2.state_name where t3.state_name = \"Alabama\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t2.traverse from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t2.traverse from state as t1 join river as t2 on t1.state_name = t2.state_name join border_info as t3 on t1.state_name = t3.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"oklahoma\" ) ORDER BY STATEalias0.POPULATION DESC LIMIT 1 ;", "prediction": "select state_name from state where border = \"Oklahoma\" group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"oklahoma\" ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"oklahoma\" ) ;", "prediction": "select state_name from state where border = \"Oklahoma\" group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT DISTINCT STATEalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , STATE AS STATEalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"oklahoma\" AND STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM BORDER_INFO AS BORDER_INFOalias1 , STATE AS STATEalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"oklahoma\" AND STATEalias1.STATE_NAME = BORDER_INFOalias1.BORDER ) AND STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ;", "prediction": "select state_name from state where border = \"Oklahoma\" group by state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: border"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" ) ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"colorado\" intersect select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.river_name = \"Colorado\" order by t2.highest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( DISTINCT RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join city as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join city as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.border = t3.river_name where t3.state_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t3.river = t2.river_name where t3.state_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.river'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.border = t3.river_name where t3.state_name = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER = \"texas\" AND BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = \"Texas\" intersect select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t3.country_name = t2.country_name where t3.river_name = \"Indian\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.country_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias2.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias2 GROUP BY BORDER_INFOalias2.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t2.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t2.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t1.state_name from border_info as t1 join city as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MAX( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 WHERE CITYalias1.POPULATION > 150000 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t2.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 ;", "prediction": "select distinct area from mountain", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: area"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( CITYalias1.POPULATION ) FROM CITY AS CITYalias1 ) ;", "prediction": "select t1.city_name from city as t1 join border_info as t2 on t1.city_name = t2.border_info order by t1.population limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.border_info'"}, {"query": "SELECT STATEalias0.DENSITY FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select t1.density from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = \"United States\" order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME NOT IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"texas\" ) ;", "prediction": "select river_name from river where country_name not in (select river_name from border_info where state_name = \"Texas\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river_name"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME NOT IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE = \"tennessee\" ) ;", "prediction": "select river_name from river where country_name not in (select river_name from border_info where state_name = \"Tennessee\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river_name"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.COUNTRY_NAME <> \"usa\" ;", "prediction": "select river_name from river where country_name not in (select river_name from border_info where state_name = \"United States\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river_name"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"austin\" ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.capital = \"Austin\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"atlanta\" ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name where t1.capital = 'Atlanta'", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT DERIVED_TABLEalias0.STATE_NAME FROM ( SELECT CITYalias0.STATE_NAME , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ) AS DERIVED_TABLEalias0 WHERE DERIVED_TABLEalias0.DERIVED_FIELDalias0 = ( SELECT MIN( DERIVED_TABLEalias1.DERIVED_FIELDalias1 ) FROM ( SELECT COUNT( 1 ) AS DERIVED_FIELDalias1 FROM CITY AS CITYalias1 GROUP BY CITYalias1.STATE_NAME ) AS DERIVED_TABLEalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.country_name = t2.country_name join city as t3 on t1.state_name = t3.state_name group by t1.state_name order by count(*) limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select t1.state_name from state as t1 join highlow as t2 on t1.state_name = t2.state_name where t2.country_name = 'United States' order by t2.highest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.country_name'"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ;", "prediction": "select t1.state_name from state as t1 join highlow as t2 on t1.state_name = t2.state_name where t2.country_name = 'United States' order by t2.highest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.country_name'"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 WHERE HIGHLOWalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME = \"idaho\" ) ) AND HIGHLOWalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.BORDER FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.STATE_NAME = \"idaho\" ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.border = \"idaho\" order by t2.lowest_point limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.lowest_point'"}, {"query": "SELECT MOUNTAINalias0.STATE_NAME FROM MOUNTAIN AS MOUNTAINalias0 WHERE MOUNTAINalias0.MOUNTAIN_NAME = \"whitney\" ;", "prediction": "select t1.border from border_info as t1 join mountain as t2 on t1.border = t2.border where t2.mountain_name = \"mount whitney\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'mountain.border'"}, {"query": "SELECT COUNT( DISTINCT RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME NOT IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = \"albany\" ) ) ;", "prediction": "select count(*) from river where traverse!= \"null\" and state_name!= \"Albany\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 , HIGHLOW AS HIGHLOWalias0 , STATE AS STATEalias0 WHERE ( HIGHLOWalias0.STATE_NAME = BORDER_INFOalias0.BORDER ) AND ( STATEalias0.STATE_NAME = BORDER_INFOalias0.BORDER ) AND HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ORDER BY STATEalias0.AREA DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join highlow as t3 on t2.border = t3.state_name order by t3.lowest_point desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: "}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t1.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MAX( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT BORDER_INFOalias0.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.BORDER IN ( SELECT STATEalias2.STATE_NAME FROM STATE AS STATEalias2 WHERE STATEalias2.POPULATION = ( SELECT MAX( STATEalias3.POPULATION ) FROM STATE AS STATEalias3 ) ) ) ) AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias1.STATE_NAME FROM BORDER_INFO AS BORDER_INFOalias1 WHERE BORDER_INFOalias1.BORDER IN ( SELECT STATEalias4.STATE_NAME FROM STATE AS STATEalias4 WHERE STATEalias4.POPULATION = ( SELECT MAX( STATEalias5.POPULATION ) FROM STATE AS STATEalias5 ) ) ) ;", "prediction": "select state_name from border_info order by population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: population"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 GROUP BY RIVERalias0.TRAVERSE ORDER BY COUNT( RIVERalias0.RIVER_NAME ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"mississippi\" ;", "prediction": "select count(distinct state_name) from state where river = \"mississippi\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river"}, {"query": "SELECT STATEalias0.POPULATION / STATEalias0.AREA FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = \"pennsylvania\" ;", "prediction": "select avg(population per square km) from state as t1 join city as t2 on t1.state_name = t2.state_name where t1.state_name = \"Pennsylvania\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: "}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 ;", "prediction": "select major lake_name from lake where state_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT LAKEalias0.LAKE_NAME FROM LAKE AS LAKEalias0 WHERE LAKEalias0.AREA > 750 ;", "prediction": "select major lake_name from lake where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 AND RIVERalias0.TRAVERSE = \"ohio\" ;", "prediction": "select count(*) from river where state_name = \"Ohio\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT DISTINCT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( DISTINCT RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select count(distinct state_name) from state where country_name in (select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name where t2.river_name = \"River\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias0 ON STATEalias0.STATE_NAME = BORDER_INFOalias0.STATE_NAME WHERE STATEalias0.STATE_NAME <> \"alaska\" AND STATEalias0.STATE_NAME <> \"hawaii\" GROUP BY STATEalias0.STATE_NAME HAVING COUNT( BORDER_INFOalias0.BORDER ) = ( SELECT MIN( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias0 , STATEalias1.STATE_NAME FROM STATE AS STATEalias1 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias1 ON STATEalias1.STATE_NAME = BORDER_INFOalias1.STATE_NAME WHERE STATEalias1.STATE_NAME <> \"alaska\" AND STATEalias1.STATE_NAME <> \"hawaii\" GROUP BY STATEalias1.STATE_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info where state_name!= \"Alaska\" except select state_name from border_info where state_name = \"Hawaii\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'left'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name join highlow as t3 on t1.state_name = t3.state_name order by t3.lowest_elevation limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name join highlow as t3 on t1.state_name = t3.state_name order by t3.lowest_point limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT COUNT( DISTINCT RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select count(distinct state_name) from river group by state_name having count(distinct state_name) >= 2", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.AREA = ( SELECT MIN( STATEalias1.AREA ) FROM STATE AS STATEalias1 WHERE STATEalias1.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ) AND STATEalias0.STATE_NAME IN ( SELECT RIVERalias2.TRAVERSE FROM RIVER AS RIVERalias2 WHERE RIVERalias2.LENGTH = ( SELECT MAX( RIVERalias3.LENGTH ) FROM RIVER AS RIVERalias3 ) ) ;", "prediction": "select t1.state_name from state as t1 join river as t2 on t1.state_name = t2.state_name order by t2.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME NOT IN ( SELECT RIVERalias2.RIVER_NAME FROM RIVER AS RIVERalias2 WHERE RIVERalias2.TRAVERSE = \"texas\" ) ) AND RIVERalias0.RIVER_NAME NOT IN ( SELECT RIVERalias3.RIVER_NAME FROM RIVER AS RIVERalias3 WHERE RIVERalias3.TRAVERSE = \"texas\" ) ;", "prediction": "select length from river where country_name not in (select river_name from border_info where state_name = \"Texas\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: river_name"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION IN ( SELECT DERIVED_TABLEalias1.DERIVED_FIELDalias0 FROM ( SELECT MAX( CITYalias1.POPULATION ) AS DERIVED_FIELDalias0 , STATEalias0.STATE_NAME FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME = CITYalias1.STATE_NAME AND STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias1 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias1 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) GROUP BY STATEalias0.STATE_NAME ) AS DERIVED_TABLEalias1 ) ;", "prediction": "select t1.city_name from city as t1 join border_info as t2 on t1.state_name = t2.state_name order by t2.border desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: as"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME NOT IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 ) ;", "prediction": "select state_name from state where state_name not in (select state_name from river)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 GROUP BY CITYalias0.STATE_NAME ORDER BY COUNT( 1 ) DESC LIMIT 1 ;", "prediction": "select t1.state_name from state as t1 join city as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT COUNT( RIVERalias0.TRAVERSE ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MIN( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ;", "prediction": "select count(distinct state_name) from state as t1 join river as t2 on t1.state_name = t2.state_name where t2.country_name = 'United States' order by t2.length limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT SUM( STATEalias0.POPULATION ) / SUM( STATEalias0.AREA ) FROM STATE AS STATEalias0 ;", "prediction": "select avg(population per square km) from state where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: /"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.TRAVERSE IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 WHERE STATEalias0.POPULATION = ( SELECT MAX( STATEalias1.POPULATION ) FROM STATE AS STATEalias1 ) ) ) ;", "prediction": "select t2.river_name from state as t1 join river as t2 on t1.state_name = t2.state_name join border_info as t3 on t1.state_name = t3.state_name order by t1.population desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'river.state_name'"}, {"query": "SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 WHERE BORDER_INFOalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH = ( SELECT MAX( RIVERalias1.LENGTH ) FROM RIVER AS RIVERalias1 ) ) ;", "prediction": "select t1.state_name from state as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t3.river_name = t2.river_name where t3.country_name = 'United States' order by t3.length desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT CITYalias0.STATE_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION = ( SELECT MIN( DERIVED_TABLEalias0.POPULATION ) FROM ( SELECT CITYalias1.POPULATION FROM CITY AS CITYalias1 , STATE AS STATEalias0 WHERE STATEalias0.CAPITAL = CITYalias1.CITY_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from state order by capital asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'as'"}, {"query": "SELECT STATEalias0.CAPITAL FROM STATE AS STATEalias0 WHERE STATEalias0.STATE_NAME IN ( SELECT BORDER_INFOalias0.BORDER FROM BORDER_INFO AS BORDER_INFOalias0 GROUP BY BORDER_INFOalias0.BORDER HAVING COUNT( 1 ) = ( SELECT MAX( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT BORDER_INFOalias1.BORDER , COUNT( 1 ) AS DERIVED_FIELDalias0 FROM BORDER_INFO AS BORDER_INFOalias1 GROUP BY BORDER_INFOalias1.BORDER ) AS DERIVED_TABLEalias0 ) ) ;", "prediction": "select t1.capital from state as t1 join border_info as t2 on t1.state_name = t2.state_name group by t1.state_name order by count(*) desc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: 1"}, {"query": "SELECT HIGHLOWalias0.STATE_NAME FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_ELEVATION = ( SELECT MIN( HIGHLOWalias1.LOWEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 , RIVER AS RIVERalias0 WHERE ( RIVERalias0.RIVER_NAME = \"mississippi\" ) AND ( RIVERalias0.TRAVERSE = HIGHLOWalias1.STATE_NAME ) ) ;", "prediction": "select t1.state_name from state as t1 join highlow as t2 on t1.state_name = t2.state_name join river as t3 on t3.river_name = t2.river_name order by t3.lowest_point limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: "}, {"query": "SELECT COUNT( RIVERalias0.RIVER_NAME ) FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > ALL ( SELECT RIVERalias1.LENGTH FROM RIVER AS RIVERalias1 WHERE RIVERalias1.RIVER_NAME = \"red\" ) AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select count(*) from river where length > (select min(length) from river where country_name = \"Texas\")", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: Error col: all"}, {"query": "SELECT STATEalias0.CAPITAL FROM CITY AS CITYalias0 , STATE AS STATEalias0 WHERE CITYalias0.POPULATION <= 150000 AND STATEalias0.CAPITAL = CITYalias0.CITY_NAME ;", "prediction": "select capital from state where country_name not in (select major city from city)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT STATEalias0.STATE_NAME FROM STATE AS STATEalias0 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias0 ON STATEalias0.STATE_NAME = BORDER_INFOalias0.STATE_NAME GROUP BY STATEalias0.STATE_NAME HAVING COUNT( BORDER_INFOalias0.BORDER ) = ( SELECT MIN( DERIVED_TABLEalias0.DERIVED_FIELDalias0 ) FROM ( SELECT COUNT( BORDER_INFOalias1.BORDER ) AS DERIVED_FIELDalias0 , STATEalias1.STATE_NAME FROM STATE AS STATEalias1 LEFT OUTER JOIN BORDER_INFO AS BORDER_INFOalias1 ON STATEalias1.STATE_NAME = BORDER_INFOalias1.STATE_NAME GROUP BY STATEalias1.STATE_NAME ) AS DERIVED_TABLEalias0 ) ;", "prediction": "select state_name from border_info group by state_name order by count(*) asc limit 1", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "gold: 'left'"}, {"query": "SELECT DISTINCT RIVERalias0.RIVER_NAME FROM RIVER AS RIVERalias0 WHERE RIVERalias0.LENGTH > 750 ;", "prediction": "select major river_name from river where country_name = \"United States\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: major"}, {"query": "SELECT RIVERalias0.LENGTH FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME = \"colorado\" AND RIVERalias0.TRAVERSE = \"texas\" ;", "prediction": "select length from river where country_name = \"Colorado\" and state_name = \"Texas\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: Error col: state_name"}, {"query": "SELECT HIGHLOWalias0.LOWEST_ELEVATION FROM HIGHLOW AS HIGHLOWalias0 WHERE HIGHLOWalias0.LOWEST_POINT = \"death valley\" ;", "prediction": "select max(t2.elevation) from mountain as t1 join highlow as t2 on t1.mountain_name = t2.mountain_name where t1.state_name = \"Death Valley\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'highlow.mountain_name'"}, {"query": "SELECT CITYalias0.CITY_NAME FROM CITY AS CITYalias0 WHERE CITYalias0.POPULATION > 150000 AND CITYalias0.STATE_NAME IN ( SELECT RIVERalias0.TRAVERSE FROM RIVER AS RIVERalias0 WHERE RIVERalias0.RIVER_NAME IN ( SELECT RIVERalias1.RIVER_NAME FROM RIVER AS RIVERalias1 WHERE RIVERalias1.LENGTH > 750 AND RIVERalias1.TRAVERSE = \"virginia\" ) ) ;", "prediction": "select t1.city_name from city as t1 join border_info as t2 on t1.state_name = t2.state_name join river as t3 on t2.river_name = t3.river_name where t3.state_name = \"Virginia\"", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'border_info.river_name'"}, {"query": "SELECT RIVERalias0.RIVER_NAME FROM HIGHLOW AS HIGHLOWalias0 , RIVER AS RIVERalias0 WHERE HIGHLOWalias0.HIGHEST_ELEVATION = ( SELECT MAX( HIGHLOWalias1.HIGHEST_ELEVATION ) FROM HIGHLOW AS HIGHLOWalias1 ) AND RIVERalias0.TRAVERSE = HIGHLOWalias0.STATE_NAME ORDER BY RIVERalias0.LENGTH DESC LIMIT 1 ;", "prediction": "select t2.length from state as t1 join river as t2 on t1.state_name = t2.country_name where t1.highest_point = (select max(highest_point) from highlow)", "db_path": "storage/datasets/geoquery/geoquery-db/geoquery-db.sqlite", "error": "predicted: 'state.highest_point'"}]