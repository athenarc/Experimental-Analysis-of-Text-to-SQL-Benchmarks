[{"query": "SELECT AwayTeam FROM football_data WHERE HomeTeam = \"Omiya Ardija\" AND Season LIKE \"%2018%\"", "prediction": "select t2.AwayTeam from betfront as t1 join football_data as t2 on t1.betfront = t2.Betfront where t1.year = 2018 and t2.Omiya Ardija = 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'betfront.betfront'"}, {"query": "SELECT count(*) FROM football_data WHERE Season LIKE \"%2010%\" AND Country = \"Spain\"", "prediction": "select count(*) from betfront as t1 join soccer_data as t2 on t1.betfront = t2.betfront where t1.year = 2010 and t2.country = \"Spain\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'soccer_data'"}, {"query": "SELECT count(*) FROM football_data WHERE PSH != \"\" AND PSD != \"\" AND PSA != \"\"", "prediction": "select count(*) from betfront where PINNACLE = 'Y'", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: pinnacle"}, {"query": "SELECT count(*) FROM football_data WHERE B365H > PSH", "prediction": "select count(*) from betfront where HOME_OPENING > (select t1.home_opening from betfront as t1 join Pinnacle as t2 on t1.betfront = t2.betfront where t2.home_opening = '1')", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'pinnacle'"}, {"query": "SELECT count(*) FROM football_data WHERE FTHG + FTAG > 5", "prediction": "select count(*) from (select * from betfront as t1 join soccer_data as t2 on t1.betfront = t2.betfront where t2.goalie count(*) > 5)", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'soccer_data'"}, {"query": "SELECT max(B365A) FROM football_data", "prediction": "select max(AWAY_CLOSING) from bet365", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'bet365'"}, {"query": "SELECT count(*) FROM football_data WHERE FTHG = 0 AND FTAG = 0", "prediction": "select count(*) from betfront as t1 join soccer_data as t2 on t1.betfront = t2.betfront where t2.match = '0-0'", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'soccer_data'"}, {"query": "SELECT B365D FROM football_data WHERE HomeTeam = \"Swindon\" and AwayTeam = \"Millwall\" and Season = \"2016/2017\"", "prediction": "select t1.DRAW_OPENING from betfront as t1 join Swindon as t2 on t1.DRAW_OPENING = t2.DRAW_OPENING where t2.Season = 2016/2017 and t2.Team = 'Swindon' and t2.Team = 'Millwall'", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'swindon'"}, {"query": "SELECT T1.school_district FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Wisconsin\" ORDER BY T1.t_fed_rev DESC LIMIT 1", "prediction": "select school_district from FINREV_FED_17 where state = \"Wisconsin\" order by t_fed_rev desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state"}, {"query": "SELECT avg(T1.c14) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Virginia\"", "prediction": "select avg(t1.t_fed_rev) from FINREV_FED_17 as t1 join state as t2 on t1.state_code = t2.state_code where t2.state = \"VA\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'state'"}, {"query": "SELECT T2.state, sum(c14),sum(c25) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY T3.average_scale_score DESC LIMIT 10", "prediction": "select t1.state, t_fed_rev, max(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.avg(t1.f", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'from' not found"}, {"query": "SELECT T1.school_district, max(T1.c14), T3.average_scale_score FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state UNION SELECT T1.school_district, max(T1.c25), T3.average_scale_score FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.state, avg(t2.average_scale_score) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.state", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, max(T1.t_fed_rev / T3.average_scale_score) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 on T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district, avg(t2.t_fed_rev) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.school_district = t2.school_district group by t1.school_district order by sum(t1.t_fed_rev) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.school_district'"}, {"query": "SELECT T2.state, T3.average_scale_score FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY sum(T1.t_fed_rev) DESC LIMIT 1", "prediction": "select t1.state, avg(t2.average_scale_score) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.state order by sum(t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.###", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, min(T1.t_fed_rev / T3.average_scale_score) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 on T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district, avg(t2.t_fed_rev) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.school_district = t2.school_district group by t1.school_district order by sum(t1.t_fed_rev) limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.school_district'"}, {"query": "SELECT T2.state, T3.average_scale_score FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY sum(T1.t_fed_rev) LIMIT 1", "prediction": "select t1.state, avg(t2.average_scale_score) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.state order by sum(t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.###", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"California\"", "prediction": "select avg(t2.average_scale_score) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code where t2.state = \"CA\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT count(DISTINCT school_district) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Indiana\"", "prediction": "select count(distinct school_district) from FINREV_FED_17 where state = \"Indiana\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state"}, {"query": "SELECT state_code FROM FINREV_FED_KEY_17 WHERE state = \"Virginia\"", "prediction": "select state_code from FINREV_FED_17 where state = \"VA\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state"}, {"query": "SELECT T2.state FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code GROUP BY T2.state ORDER BY sum(t_fed_rev) DESC LIMIT 1", "prediction": "select state from FINREV_FED_17 order by t_fed_rev desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state"}, {"query": "SELECT sum(T1.c14), sum(T1.c25) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Colorado\"", "prediction": "select sum(t1.t_fed_rev), t1.state from FINREV_FED_17 as t1 join school as t2 on t1.school_district = t2.school_district where t1.state = \"CO\" and t1.t_fed_rev >= 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'school'"}, {"query": "SELECT t_fed_rev FROM FINREV_FED_17 WHERE school_district LIKE \"%Pecatonia Area%\"", "prediction": "select sum(t1.t_fed_rev) from FINREV_FED_17 as t1 join school_district as t2 on t1.school_district = t2.school_district where t2.name = 'Pecatonia Area'", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'school_district'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"North Carolina\" UNION SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"South Carolina\"", "prediction": "select avg(t1.average_scale_score), t1.state from NDECoreExcel_Math_Grade8 as t1 join student as t2 on t1.all_students = t2.all_students where t1.state = \"NC\" union select avg(t1.average_scale_score) from NDECoreExcel_Math_Grade8 as t1 join student as t2 on t1.all_students = t2.students where t1.state = \"SC\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'student'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"North Carolina\" UNION SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"New York\"", "prediction": "select avg(t1.average_scale_score) from NDECoreExcel_Math_Grade8 as t1 join FINREV_FED_KEY_17 as t2 on t1.state_code = t2.state_code join NDECoreExcel_Math_Grade8 as t3 on t2.school_district = t3.school_district where t1.state = \"NC\" intersect select avg(t1.average_scale_score) from NDECoreExcel_Math_Grade8 as t1 join FINREV_FED_KEY_17 as t2 on t1.state_code = t2.state_code join NDECoreExcel_Math_Grade8 as t3 on t2.school_district = t3.school_district where t1.state = \"NY\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT count(*) FROM FINREV_FED_17 WHERE c25 > c14", "prediction": "select count(*) from FINREV_FED_17 where t_fed_rev > t1.c25 and t1.child_left_school_behind = 0", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 't1'"}, {"query": "SELECT count(*) FROM sampledata15 WHERE origin = \"3\"", "prediction": "select count(*) from sampledata where country = \"Unknown\"", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sampledata'"}, {"query": "SELECT T2.commod FROM resultsdata15 as T2 JOIN sampledata15 as T1 ON T1.sample_pk = T2.sample_pk WHERE T1.year = 15 GROUP BY T2.commod ORDER BY sum(T2.concen) DESC LIMIT 10", "prediction": "select t1.commod from resultsdata15 as t1 join sampledata as t2 on t1.sample_pk = t2.sample_pk where t2.year = 2015 order by t2.distst desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sampledata'"}, {"query": "SELECT T1.variety FROM resultsdata15 as T2 JOIN sampledata15 as T1 ON T1.sample_pk = T2.sample_pk WHERE T2.commod = \"AP\" GROUP BY T1.variety ORDER BY sum(T2.concen) DESC LIMIT 1", "prediction": "select distinct t1.variety from sampledata15 as t1 join resultsdata15 as t2 on t1.sample_pk = t2.sample_pk join pesticide as t3 on t2.pestcode = t3.pestcode group by t1.variety having avg(t3.pesticide) >= 2", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'pesticide'"}, {"query": "SELECT T1.country FROM sampledata15 as T1 JOIN resultsdata15 as T2 ON T1.sample_pk = T2.sample_pk GROUP BY T1.country ORDER BY sum(T2.concen) LIMIT 1", "prediction": "select country from sampledata15 where pesticide concentration >= (select min(pesticide) from sampledata15)", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: pesticide"}, {"query": "SELECT year, month, day FROM sampledata15 WHERE sample_pk = 3763", "prediction": "select date from sampledata15 where year = 3763", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: date"}, {"query": "SELECT testclass FROM resultsdata15 WHERE sample_pk = 7498", "prediction": "select testcode from resultsdata15 where sample_pk = 7498", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: testcode"}, {"query": "SELECT mean FROM resultsdata15 WHERE commod = \"AP\"", "prediction": "select avg(t1.mean) from resultsdata15 as t1 join sample as t2 on t1.sample_pk = t2.sample_pk where t2.product = 'AP'", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sample'"}, {"query": "SELECT count(*) FROM sampledata15 WHERE origin = \"2\"", "prediction": "select count(*) from sampledata where country = 'USA'", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sampledata'"}, {"query": "SELECT votedby FROM hall_of_fame WHERE yearid = \"2000\" GROUP BY votedby ORDER BY count(*) DESC LIMIT 1", "prediction": "select votedby from hall_of_fame where year = 2000 group by votedby order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT player_id FROM player_award WHERE year = 2010 AND award_id = \"Rookie of the Year\"", "prediction": "select t2.name from player_award as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 2010 and t2.award_id = 'Rookie of the Year'", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.name'"}, {"query": "SELECT salary FROM salary WHERE league_id = \"NL\"", "prediction": "select salary from salary where league_id = (select national_league from salary group by league_id)", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: national_league"}, {"query": "SELECT salary FROM salary WHERE league_id = \"AL\"", "prediction": "select salary from salary where league_id = (select American_league from salary)", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: american_league"}, {"query": "SELECT T1.birth_country FROM hall_of_fame as T2 JOIN player as T1 ON T1.player_id = T2.player_id WHERE T2.inducted = \"Y\" AND T2.yearid >= 1871", "prediction": "select t1.birth_country from player as t1 join hall_of_fame as t2 on t1.player_id = t2.player_id where t2.year > 1871", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'hall_of_fame.year'"}, {"query": "SELECT award_id FROM player_award as T1 JOIN salary as T2 ON T1.player_id = T2.player_id GROUP BY T1.award_id ORDER BY avg(T2.salary) DESC LIMIT 1", "prediction": "select t1.award_id from player_award as t1 join salary as t2 on t1.award_id = t2.award_id order by t2.salary desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'salary.award_id'"}, {"query": "SELECT DISTINCT yearid FROM hall_of_fame WHERE needed_note != \"\"", "prediction": "select yearid from hall_of_fame where votes by special_elections", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error condition: idx: 6, tok: by"}, {"query": "SELECT T1.birth_country FROM player as T1 JOIN hall_of_fame as T2 ON T1.player_id = T2.player_id WHERE T2.inducted = \"Y\" GROUP BY T1.birth_country ORDER BY count(*) DESC LIMIT 10", "prediction": "1.birth_country from player as t1 join hall_of_fame as t2 on t1.player_id = t2.player_id group by t1.birth_country order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'select' not found"}, {"query": "SELECT T2.team_id FROM hall_of_fame as T1 JOIN salary as T2 ON T1.player_id = T2.player_id AND T1.yearid = T2.year WHERE T1.inducted = \"Y\" GROUP BY T2.team_id ORDER BY count(*) DESC LIMIT 10", "prediction": "select t2.name from hall_of_fame as t1 join team as t2 on t1.team_id = t2.team_id group by t2.name order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'team'"}, {"query": "SELECT avg(T1.death_year - T1.birth_year) FROM player as T1 JOIN hall_of_fame as T2 ON T1.player_id = T2.player_id WHERE T2.inducted = \"Y\"", "prediction": "vg(t1.death_year) from player as t1 join hall_of_fame as t2 on t1.player_id = t2.player_id", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'select' not found"}, {"query": "SELECT avg(T1.weight) FROM player as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id GROUP BY notes", "prediction": "select avg(weight), position from player group by position", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: position"}, {"query": "SELECT T2.notes FROM hall_of_fame as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id WHERE T1.inducted = \"Y\" GROUP BY notes ORDER BY count(*) DESC LIMIT 1", "prediction": "select t2.category from hall_of_fame as t1 join player_award as t2 on t1.player_id = t2.player_id group by t2.category order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player_award.category'"}, {"query": "SELECT player_id FROM player_award_vote WHERE year = \"1971\" ORDER BY points_won DESC LIMIT 1", "prediction": "select t2.player_id from hall_of_fame as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 1971 order by t2.points_won desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'hall_of_fame.year'"}, {"query": "SELECT league_id FROM player_award WHERE year = \"2006\" GROUP BY league_id ORDER BY count(*) DESC LIMIT 1", "prediction": "select t2.league_id from player_award as t1 join league as t2 on t1.league_id = t2.league_id where t1.year = 2006 group by t2.league_id order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'league'"}, {"query": "SELECT DISTINCT notes FROM player_award WHERE player_id = \"willite01\"", "prediction": "select position from player where player_id = willite01", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: position"}, {"query": "SELECT avg(T1.weight) FROM player as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id WHERE T2.award_id = \"TSN All-Star\" AND notes = \"3B\"", "prediction": "select avg(t1.weight) from player as t1 join player_award as t2 on t1.player_id = t2.player_id join award as t3 on t2.award_id = t3.award_id where t3.name_first = \"TSN\" and t3.name_last = \"Boston\"", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'award'"}, {"query": "SELECT Country FROM nuclear_power_plants WHERE Name = \"Chinon-A3\"", "prediction": "select country from nuclear_power_plants where Chinon-A3 = \"A3\"", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: Error col: chinon-a3"}, {"query": "SELECT Longitude, Latitude FROM nuclear_power_plants WHERE ReactorType = \"BWR\" ORDER BY ConstructionStartAt LIMIT 1", "prediction": "select t1.name, t1.location from nuclear_power_plants as t1 join GeoNuclearData as t2 on t1.id = t2.nuclear_power_plants where t1.reactorType = 'BWR' order by t1.constructionstartAt limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: 'geonucleardata'"}, {"query": "SELECT groupName FROM torrents WHERE groupYear > 2000 ORDER BY totalSnatched DESC LIMIT 5", "prediction": "select t1.releaseType, count(*) from releases as t1 join torrents as t2 on t1.groupId = t2.groupId where t1.releaseYear > 2000 group by t2.groupId order by count(*) desc limit 5", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'releases'"}, {"query": "SELECT DISTINCT groupName FROM torrents WHERE totalSnatched > 100 AND releaseType = \"album\"", "prediction": "select t2.releaseType from torrents as t1 join albums as t2 on t1.groupId = t2.groupId group by t1.groupId having count(*) > 100", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'albums'"}, {"query": "SELECT T2.groupName FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id WHERE T1.tag = \"houston\" ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select releaseType from torrents where groupId = (select groupId from torrents where totalSnatched > 100) groupName = \"Houston\" groupName order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error condition: idx: 21, tok: order"}, {"query": "SELECT groupName FROM torrents WHERE artist = \"lasean camry\" AND totalSnatched = (SELECT max(totalSnatched) FROM torrents WHERE artist = \"lasean camry\") UNION SELECT groupName FROM torrents WHERE artist = \"lasean camry\" AND totalSnatched = (SELECT min(totalSnatched) FROM torrents WHERE artist = \"lasean camry\")", "prediction": "select max(t1.releaseSnatched), min(t1.releaseSnatched) from torrents as t1 join lasean camry as t2 on t1.groupId = t2.groupId group by t2.groupId where t2.releaseType = \"Lasean Camry\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'lasean'"}, {"query": "SELECT groupName FROM torrents WHERE releaseType = \"album\" ORDER BY totalSnatched DESC LIMIT 10", "prediction": "select t2.releaseType, count(*) from torrents as t1 join albums as t2 on t1.groupId = t2.groupId group by t2.releaseType order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'albums'"}, {"query": "SELECT artist FROM torrents WHERE groupYear = 2015 GROUP BY artist ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select groupName, t2.groupYear from torrents as t1 join group as t2 on t1.groupId = t2.groupId where t1.groupYear = 2015 group by t2.groupYear order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'group'"}, {"query": "SELECT T1.tag, T2.groupName FROM torrents as T2 JOIN tags as T1 ON T1.id = T2.id", "prediction": "select distinct tag from tags as t1 join releases as t2 on t1.id = t2.releaseId", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'releases'"}, {"query": "SELECT groupName FROM torrents ORDER BY totalSnatched DESC LIMIT 1", "prediction": "select t1.releaseType from CD as t1 join torrents as t2 on t1.groupId = t2.groupId group by t2.groupId order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'cd'"}, {"query": "SELECT artist FROM torrents GROUP BY artist ORDER BY sum(totalSnatched) DESC LIMIT 1", "prediction": "select t1.artist, t1.releaseType from CDs as t1 join torrents as t2 on t1.groupId = t2.groupId group by t1.releaseType order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'cds'"}, {"query": "SELECT sum(totalSnatched) FROM torrents WHERE releaseType = \"ep\"  UNION SELECT sum(totalSnatched) FROM torrents WHERE releaseType = \"album\"", "prediction": "select count(*), t1.releaseType from albums as t1 join torrents as t2 on t1.id = t2.groupId group by t1.releaseType", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'albums'"}, {"query": "SELECT artist FROM torrents GROUP BY artist HAVING count(*) = 1", "prediction": "select artist, group from torrents groupId = 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'groupid'"}, {"query": "SELECT CrimeTS FROM GreaterManchesterCrime GROUP BY CrimeTS ORDER BY count(*) DESC LIMIT 1", "prediction": "select Time from GreaterManchesterCrime group by Time order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: time"}, {"query": "SELECT Location FROM GreaterManchesterCrime WHERE Type = \"Violence and sexual offences\" GROUP BY Location ORDER BY count(*) DESC LIMIT 1", "prediction": "select location from GreaterManchesterCrime where Sexual Offenses = \"S\" group by location order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: sexual"}, {"query": "SELECT Outcome FROM GreaterManchesterCrime WHERE CrimeID = \"6B:E2:54:C6:58:D2\"", "prediction": "select Outcome from case 6B:E2:54:C6:58:D2", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: 'case'"}, {"query": "SELECT * FROM Fires WHERE State = \"TX\" AND STAT_CAUSE_DESCR LIKE \"Campfire\"", "prediction": "select distinct t1.FIRE_SIZE from Fires as t1 join Campfires as t2 on t1.FIRE_SIZE = t2.FIRE_SIZE_CLASS where t2.STATE = \"Texas\"", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'campfires'"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE State = \"NY\" and FIRE_YEAR = \"2006\"", "prediction": "select sum(t2.acres) from Fires as t1 join CoUNTY as t2 on t1.COUNTY = t2.COUNTY where t1.FIRE_YEAR = 2006 and t2.COUNTY = \"NC\"", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'county'"}, {"query": "SELECT count(*) FROM Fires WHERE STAT_CAUSE_DESCR LIKE \"%Campfire%\" AND FIRE_YEAR = 2014", "prediction": "select count(*) from Fires where FIRE_YEAR = 2014 and MISTAKE_CAUSE_CODE = \"MISTAKE\"", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: mistake_cause_code"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE State = \"TX\" AND FIRE_YEAR BETWEEN 2000 AND 2010", "prediction": "select sum(t1.acres) from Fires as t1 join States as t2 on t1.COUNTY = t2.STATE where t1.FIRE_YEAR between 2000 and 2010", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'states'"}]