[{"query": "SELECT AwayTeam FROM football_data WHERE HomeTeam = \"Omiya Ardija\" AND Season LIKE \"%2018%\"", "prediction": "select t1.AwayTeam from football_data as t1 join betfront as t2 on t1.season = t2.year where t2.name = 'Omiya Ardija' and t2.year = 2018", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'betfront.name'"}, {"query": "SELECT MATCH FROM betfront ORDER BY DRAW_OPENING DESC LIMIT 1", "prediction": "select t2.MATCH from betfront as t1 join match as t2 on t1.match = t2.match where t1.DRAW_OPENING = (select max(DRAW_OPENING) from betfront)", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'match'"}, {"query": "SELECT count(*) FROM football_data WHERE PSH != \"\" AND PSD != \"\" AND PSA != \"\"", "prediction": "select count(*) from betfront where company = 'Pinnacle'", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: company"}, {"query": "SELECT count(*) FROM football_data WHERE B365H > PSH", "prediction": "select count(*) from betfront where home_oopening > (select t1.home_opening from betfront as t1 join football_data as t2 on t1.bet365 = t2.company where t2.home_winner > (select t2.home_winner from football_data as t3 join betfront as t4 on t3.bet365 = t4.company where t2.platinum)", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: home_oopening"}, {"query": "SELECT count(*) FROM football_data WHERE FTHG + FTAG > 5", "prediction": "select count(*) from betfront where total(goals) > 5", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: Error col: total"}, {"query": "SELECT max(B365A) FROM football_data", "prediction": "select max(t2.home_losing) from betfront as t1 join football_data as t2 on t1.home_opening = t2.home_opening and t1.away_opening = t2.away_opening", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'football_data.home_opening'"}, {"query": "SELECT B365D FROM football_data WHERE HomeTeam = \"Swindon\" and AwayTeam = \"Millwall\" and Season = \"2016/2017\"", "prediction": "select t1.odds from bet365 as t1 join football_data as t2 on t1.b365h = t2.b365d join match as t3 on t2.match = t3.match where t2.homeTeam = swindon and t3.awayTeam = millwall and t2.season = 2016/2017", "db_path": "storage/datasets/kaggle-dbqa/databases/WorldSoccerDataBase/WorldSoccerDataBase.sqlite", "error": "predicted: 'bet365'"}, {"query": "SELECT T1.school_district FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Wisconsin\" ORDER BY T1.t_fed_rev DESC LIMIT 1", "prediction": "select school_district from FINREV_FED_17 where state = \"WI\" group by school_district order by sum(t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.school_distance", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: Error col: state"}, {"query": "SELECT avg(T1.c14) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Virginia\"", "prediction": "select avg(t1.t1.title1 fund) from FINREV_FED_KEY_17 as t1 join FINREV_FED_17 as t2 on t1.state_code = t2.state_code where t2.state = \"VA\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: too many values to unpack (expected 2)"}, {"query": "SELECT T2.state, sum(c14),sum(c25) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY T3.average_scale_score DESC LIMIT 10", "prediction": "select t1.state, avg(t2.average_scale_score), t2.t_fed_rev from NDECoreExcel_Math_Grade8 as t1 join FINREV_FED_KEY_17 as t2 on t1.state_code = t2.state_code group by t2.state_code", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, max(T1.c14), T3.average_scale_score FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state UNION SELECT T1.school_district, max(T1.c25), T3.average_scale_score FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district, avg(t2.adjusted_rev) from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.state_code = t2.state_code group by t1.school_district", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, max(T1.t_fed_rev / T3.average_scale_score) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 on T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.school_district = t2.school_district group by t1.school_district order by t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t_fed_rev = t2.t1.t3.t1.t1.t1.t1.school_district", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.school_district'"}, {"query": "SELECT T2.state, T3.average_scale_score FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY sum(T1.t_fed_rev) DESC LIMIT 1", "prediction": "select state_code, avg(t1.t1.average_scale_score) from NDECoreExcel_Math_Grade8 as t1 join FINREV_FED_17 as t2 on t1.state_code = t2.state_code group by t2.state_code order by sum(t2.t1.t1.t2.t1.t2.t2.t2.t1.t2.t2.t1.state_code = t2.state_code", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT T1.school_district, min(T1.t_fed_rev / T3.average_scale_score) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 on T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state", "prediction": "select t1.school_district from FINREV_FED_17 as t1 join NDECoreExcel_Math_Grade8 as t2 on t1.school_district = t2.school_district group by t1.school_district order by sum(t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t1.t_fed_rev) asc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.school_district'"}, {"query": "SELECT T2.state, T3.average_scale_score FROM FINREV_FED_KEY_17 as T2 JOIN FINREV_FED_17 as T1 ON T1.state_code = T2.state_code JOIN NDECoreExcel_Math_Grade8 as T3 ON T2.state = T3.state GROUP BY T2.state ORDER BY sum(T1.t_fed_rev) LIMIT 1", "prediction": "select state_code, avg(t1.t1.average_scale_score) from NDECoreExcel_Math_Grade8 as t1 join FINREV_FED_17 as t2 on t1.state_code = t2.state_code group by t2.state_code order by sum(t2.t1.t1.t2.t2.t2.t2.t2.t2.t3.t3.t_fed_rev) asc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE state = \"California\"", "prediction": "select avg(t2.average_scale_score) from NDECoreExcel_Math_Grade8 as t1 join FINREV_FED_KEY_17 as t2 on t1.state_code = t2.state_code where t1.state = \"CA\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'ndecoreexcel_math_grade8.state_code'"}, {"query": "SELECT sum(T1.c14), sum(T1.c25) FROM FINREV_FED_17 as T1 JOIN FINREV_FED_KEY_17 as T2 ON T1.state_code = T2.state_code WHERE T2.state = \"Colorado\"", "prediction": "select sum(t1.title1, t1.child_nutrition) from FINREV_FED_17 as t1 join FINREV_FED_KEY_17 as t2 on t1.state_code = t2.state_code where t1.state_code = \"CO\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'finrev_fed_17.title1'"}, {"query": "SELECT t_fed_rev FROM FINREV_FED_17 WHERE school_district LIKE \"%Pecatonia Area%\"", "prediction": "select sum(t1.feet) from FINREV_FED_17 as t1 join school_district as t2 on t1.school_district = t2.school_district where t2.town = \"Pecatonia Area\"", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 'school_district'"}, {"query": "SELECT count(*) FROM FINREV_FED_17 WHERE c25 > c14", "prediction": "select count(*) from FINREV_FED_17 where t1.c14 > t1.c25", "db_path": "storage/datasets/kaggle-dbqa/databases/StudentMathScore/StudentMathScore.sqlite", "error": "predicted: 't1'"}, {"query": "SELECT T2.commod FROM resultsdata15 as T2 JOIN sampledata15 as T1 ON T1.sample_pk = T2.sample_pk WHERE T1.year = 15 GROUP BY T2.commod ORDER BY sum(T2.concen) DESC LIMIT 10", "prediction": "select commod from resultsdata15 order by max(t2.residue) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 't2'"}, {"query": "SELECT T1.variety FROM resultsdata15 as T2 JOIN sampledata15 as T1 ON T1.sample_pk = T2.sample_pk WHERE T2.commod = \"AP\" GROUP BY T1.variety ORDER BY sum(T2.concen) DESC LIMIT 1", "prediction": "select variety from sampledata15 where pestcode = \"A\" group by variety order by sum(pesticide) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: pestcode"}, {"query": "SELECT T1.country FROM sampledata15 as T1 JOIN resultsdata15 as T2 ON T1.sample_pk = T2.sample_pk GROUP BY T1.country ORDER BY sum(T2.concen) LIMIT 1", "prediction": "select country from sampledata15 where concen = (select max(concen) from resultsdata15)", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: concen"}, {"query": "SELECT year, month, day FROM sampledata15 WHERE sample_pk = 3763", "prediction": "select date from sampledata15 where sample_pk = 3763", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: date"}, {"query": "SELECT site FROM sampledata15 WHERE sample_pk = 3763", "prediction": "select collection_code from sampledata15 where sample_pk = 3763", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: Error col: collection_code"}, {"query": "SELECT quantity FROM sampledata15 WHERE sample_pk = 9628", "prediction": "select count(*) from resultsdata15 as t1 join sampledata15 as t2 on t1.sample_pk = t2.sample_pk where t2.sample_id = 9628", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sampledata15.sample_id'"}, {"query": "SELECT conunit FROM resultsdata15 WHERE commod = \"PO\"", "prediction": "select t2.quantity from sampledata15 as t1 join resultsdata15 as t2 on t1.commod = t2.commod where t1.commod = \"PO\"", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'resultsdata15.quantity'"}, {"query": "SELECT mean FROM resultsdata15 WHERE commod = \"AP\"", "prediction": "select avg(t1.mean) from resultsdata15 as t1 join sampledata15 as t2 on t1.sample_pk = t2.sample_pk where t2.pestcode = \"AP\"", "db_path": "storage/datasets/kaggle-dbqa/databases/Pesticide/Pesticide.sqlite", "error": "predicted: 'sampledata15.pestcode'"}, {"query": "SELECT T2.salary FROM salary as T2 JOIN hall_of_fame as T1 ON T1.player_id = T2.player_id WHERE T1.inducted = \"Y\"", "prediction": "select salary from hall_of_fame", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: salary"}, {"query": "SELECT DISTINCT yearid FROM hall_of_fame WHERE needed_note != \"\"", "prediction": "select distinct yearid from hall_of_fame where special_elections = 'Y'", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: special_elections"}, {"query": "SELECT T1.player_id, T1.award_id , min(T1.year - T2.birth_year) FROM player_award as T1 JOIN player as T2 ON T1.player_id = T2.player_id GROUP BY T1.award_id", "prediction": "select award_id, min(birth_year) from player", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: award_id"}, {"query": "SELECT T1.player_id, T1.award_id , max(T1.year - T2.birth_year) FROM player_award as T1 JOIN player as T2 ON T1.player_id = T2.player_id GROUP BY T1.award_id", "prediction": "select t2.player_id, t1.yearid from player as t1 join player_award as t2 on t1.player_id = t2.player_id order by t1.birth_year desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.yearid'"}, {"query": "SELECT T2.team_id FROM hall_of_fame as T1 JOIN salary as T2 ON T1.player_id = T2.player_id AND T1.yearid = T2.year WHERE T1.inducted = \"Y\" GROUP BY T2.team_id ORDER BY count(*) DESC LIMIT 10", "prediction": "select t2.name_first, t2.name_last from hall_of_fame as t1 join salary as t2 on t1.player_id = t2.player_id group by t2.team_id order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'salary.name_first'"}, {"query": "SELECT avg(T1.death_year - T1.birth_year) FROM player as T1 JOIN hall_of_fame as T2 ON T1.player_id = T2.player_id WHERE T2.inducted = \"Y\"", "prediction": "select avg(t1.lifespan) from player as t1 join hall_of_fame as t2 on t1.player_id = t2.player_id", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player.lifespan'"}, {"query": "SELECT avg(T1.weight) FROM player as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id GROUP BY notes", "prediction": "select avg(t2.weight), t1.position from player as t1 join player_award as t2 on t1.player_id = t2.player_id group by t1.position", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player_award.weight'"}, {"query": "SELECT T2.notes FROM hall_of_fame as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id WHERE T1.inducted = \"Y\" GROUP BY notes ORDER BY count(*) DESC LIMIT 1", "prediction": "select t2.position from hall_of_fame as t1 join player_award as t2 on t1.player_id = t2.player_id group by t2.position order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player_award.position'"}, {"query": "SELECT player_id FROM player_award_vote WHERE year = \"1971\" ORDER BY points_won DESC LIMIT 1", "prediction": "select player_id from player where year = 1971 order by score limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: year"}, {"query": "SELECT DISTINCT notes FROM player_award WHERE player_id = \"willite01\"", "prediction": "select defense from player where player_id = willite01", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: Error col: defense"}, {"query": "SELECT avg(T1.weight) FROM player as T1 JOIN player_award as T2 ON T1.player_id = T2.player_id WHERE T2.award_id = \"TSN All-Star\" AND notes = \"3B\"", "prediction": "select avg(weight) from player as t1 join player_award as t2 on t1.player_id = t2.player_id where t2.award_id = 'TSN all-star' and t2.position = '3'", "db_path": "storage/datasets/kaggle-dbqa/databases/TheHistoryofBaseball/TheHistoryofBaseball.sqlite", "error": "predicted: 'player_award.position'"}, {"query": "SELECT Longitude, Latitude FROM nuclear_power_plants WHERE ReactorType = \"BWR\" ORDER BY ConstructionStartAt LIMIT 1", "prediction": "select t1.Location, t1.ConstructionStartAt from nuclear_power_plants as t1 join power_plants as t2 on t1.Id = t2.Id where t2.ReactorType = \"BWR\" order by t1.ConstructionStartAt limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GeoNuclearData/GeoNuclearData.sqlite", "error": "predicted: 'power_plants'"}, {"query": "SELECT groupName, groupYear FROM torrents", "prediction": "select releaseYear from torrents group by releaseYear", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: releaseyear"}, {"query": "SELECT groupName, artist FROM torrents", "prediction": "select artist, groupName from torrents group by artist/groupName", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: artist/groupname"}, {"query": "SELECT DISTINCT groupName FROM torrents WHERE totalSnatched > 100 AND releaseType = \"album\"", "prediction": "select t1.album from albums as t1 join torrents as t2 on t1.groupId = t2.groupId where t2.totalSnatched > 100", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'albums'"}, {"query": "SELECT groupName FROM torrents WHERE artist = \"lasean camry\" AND totalSnatched = (SELECT max(totalSnatched) FROM torrents WHERE artist = \"lasean camry\") UNION SELECT groupName FROM torrents WHERE artist = \"lasean camry\" AND totalSnatched = (SELECT min(totalSnatched) FROM torrents WHERE artist = \"lasean camry\")", "prediction": "select max(t1.totalSnatched), min(t1.totalSnatched) from torrents as t1 join tags as t2 on t1.groupId = t2.groupId where t1.releaseType = \"lasean camry\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'tags.groupid'"}, {"query": "SELECT groupName FROM torrents WHERE releaseType = \"album\" ORDER BY totalSnatched DESC LIMIT 10", "prediction": "select album from torrents order by count(*) desc limit 10", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: album"}, {"query": "SELECT artist FROM torrents GROUP BY artist ORDER BY count(groupName) DESC LIMIT 1", "prediction": "select artist/group from torrents group by artist order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: artist/group"}, {"query": "SELECT artist FROM torrents GROUP BY artist ORDER BY avg(totalSnatched) DESC LIMIT 1", "prediction": "select artist/group from torrents group by artist order by avg(totalSnatched) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: artist/group"}, {"query": "SELECT artist FROM torrents GROUP BY artist ORDER BY sum(totalSnatched) DESC LIMIT 1", "prediction": "select artist from CDs group by artist order by sales desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'cds'"}, {"query": "SELECT sum(totalSnatched) FROM torrents WHERE releaseType = \"ep\"  UNION SELECT sum(totalSnatched) FROM torrents WHERE releaseType = \"album\"", "prediction": "select count(*), t1.title from tags as t1 join torrents as t2 on t1.id = t2.groupId where t1.title = \"Ep\" and t1.title = \"Album\"", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: 'tags.title'"}, {"query": "SELECT artist FROM torrents WHERE groupYear > 2010 GROUP BY artist", "prediction": "select artist from torrents where releaseYear > 2010", "db_path": "storage/datasets/kaggle-dbqa/databases/WhatCDHipHop/WhatCDHipHop.sqlite", "error": "predicted: Error col: releaseyear"}, {"query": "SELECT CrimeTS FROM GreaterManchesterCrime GROUP BY CrimeTS ORDER BY count(*) DESC LIMIT 1", "prediction": "select Time from GreaterManchesterCrime group by Time order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: time"}, {"query": "SELECT count(*) FROM GreaterManchesterCrime WHERE Outcome LIke \"%Under investigation%\"", "prediction": "select count(*) from GreaterManchesterCrime where crime status = \"Under investigation\"", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: crime"}, {"query": "SELECT Location FROM GreaterManchesterCrime GROUP BY Location ORDER BY count(*) DESC LIMIT 1", "prediction": "select location from GreaterManchesterCrime order by priority asc", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: priority"}, {"query": "SELECT Outcome FROM GreaterManchesterCrime WHERE CrimeID = \"6B:E2:54:C6:58:D2\"", "prediction": "select Outcome from GreaterManchesterCrime where CrimeID = 6B:E2:54:C6:58:D2", "db_path": "storage/datasets/kaggle-dbqa/databases/GreaterManchesterCrime/GreaterManchesterCrime.sqlite", "error": "predicted: Error col: 6b"}, {"query": "SELECT OWNER_DESCR FROM FIres WHERE State = \"OR\" AND FIRE_YEAR = 2015 ORDER BY FIRE_SIZE DESC LIMIT 1", "prediction": "select t1.OWNER_CODE from OWNER_CODE as t1 join Fires as t2 on t1.OWNER_CODE = t2.OWNER_CODE where t2.FIRE_YEAR = 2015 and t2.FIRE_SIZE_CLASS = \"MAJOR\"", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'owner_code'"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE State = \"NY\" and FIRE_YEAR = \"2006\"", "prediction": "select sum(f_sizable) from fires where state = \"NC\" and year = 2006", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: f_sizable"}, {"query": "SELECT * FROM Fires WHERE State = \"UT\" AND FIRE_YEAR = 1997 ORDER BY FIRE_SIZE DESC LIMIT 1", "prediction": "select t1.STAT_CAUSE_DESCR from stat_cause_code as t1 join fires as t2 on t1.STAT_CAUSE_CODE = t2.STAT_CAUSE_CODE where t2.FIRE_YEAR = 1997 and t2.FIRE_SIZE_CLASS = \"MAXIMUM\"", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'stat_cause_code'"}, {"query": "SELECT OWNER_DESCR FROM Fires GROUP BY OWNER_DESCR ORDER BY count(*) DESC LIMIT 1", "prediction": "select t1.OWNER_CODE, t2.OWNER_DESCR from OWNER_CODE as t1 join Fires as t2 on t1.OWNER_CODE = t2.OWNER_CODE group by t1.OWNER_CODE order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'owner_code'"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE State = \"TX\" AND FIRE_YEAR BETWEEN 2000 AND 2010", "prediction": "select sum(t1.fIRE_SIZE) from fires as t1 join land as t2 on t1.fIRE_SIZE = t2.fIRE_SIZE_CLASS from fires as t1 join land as t2 on t1.fIRE_SIZE = t2.fIRE_SIZE_CLASS where t2.year >= 2000 and t2.year <= 2010", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: 'land'"}, {"query": "SELECT STAT_CAUSE_DESCR FROM Fires GROUP BY STAT_CAUSE_DESCR ORDER BY count(*) DESC LIMIT 1", "prediction": "select stat_cause_desc from fires group by stat_cause_desc order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: stat_cause_desc"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires", "prediction": "select sum(feet) from fires", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: feet"}, {"query": "SELECT sum(FIRE_SIZE) FROM Fires WHERE STATE = \"TX\" AND FIRE_YEAR BETWEEN 2000 AND 2010  UNION SELECT sum(FIRE_SIZE) FROM Fires WHERE STATE = \"TX\" AND FIRE_YEAR BETWEEN 1990 AND 2000", "prediction": "select avg(french_acres) from fires where FIRE_YEAR = 2000 union select avg(french_acres) from fires where FIRE_YEAR = 1990", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: french_acres"}, {"query": "SELECT LATITUDE FROM Fires GROUP BY LATITUDE ORDER BY count(*) DESC LIMIT 1", "prediction": "select latitudinal band from fires where country = 'USA' group by latitudinal band order by count(*) desc limit 1", "db_path": "storage/datasets/kaggle-dbqa/databases/USWildFires/USWildFires.sqlite", "error": "predicted: Error col: latitudinal"}]